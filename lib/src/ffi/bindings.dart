// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// bindings to libedax
class LibEdaxBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibEdaxBindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibEdaxBindings.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  /// conversion from an 8-bit line to the A1-A8 line
  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _A1_A8 = _lookup<ffi.Pointer<ffi.Uint64>>('A1_A8');

  ffi.Pointer<ffi.Uint64> get A1_A8 => _A1_A8.value;

  set A1_A8(ffi.Pointer<ffi.Uint64> value) => _A1_A8.value = value;

  late final ffi.Pointer<Link> _BAD_LINK = _lookup<Link>('BAD_LINK');

  Link get BAD_LINK => _BAD_LINK.ref;

  late final ffi.Pointer<ffi.Int32> _BOOK_INFO_RESOLUTION = _lookup<ffi.Int32>('BOOK_INFO_RESOLUTION');

  int get BOOK_INFO_RESOLUTION => _BOOK_INFO_RESOLUTION.value;

  set BOOK_INFO_RESOLUTION(int value) => _BOOK_INFO_RESOLUTION.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _COUNT_FLIP_2 = _lookup<ffi.Pointer<ffi.Int8>>('COUNT_FLIP_2');

  ffi.Pointer<ffi.Int8> get COUNT_FLIP_2 => _COUNT_FLIP_2.value;

  set COUNT_FLIP_2(ffi.Pointer<ffi.Int8> value) => _COUNT_FLIP_2.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _COUNT_FLIP_3 = _lookup<ffi.Pointer<ffi.Int8>>('COUNT_FLIP_3');

  ffi.Pointer<ffi.Int8> get COUNT_FLIP_3 => _COUNT_FLIP_3.value;

  set COUNT_FLIP_3(ffi.Pointer<ffi.Int8> value) => _COUNT_FLIP_3.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _COUNT_FLIP_4 = _lookup<ffi.Pointer<ffi.Int8>>('COUNT_FLIP_4');

  ffi.Pointer<ffi.Int8> get COUNT_FLIP_4 => _COUNT_FLIP_4.value;

  set COUNT_FLIP_4(ffi.Pointer<ffi.Int8> value) => _COUNT_FLIP_4.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _COUNT_FLIP_5 = _lookup<ffi.Pointer<ffi.Int8>>('COUNT_FLIP_5');

  ffi.Pointer<ffi.Int8> get COUNT_FLIP_5 => _COUNT_FLIP_5.value;

  set COUNT_FLIP_5(ffi.Pointer<ffi.Int8> value) => _COUNT_FLIP_5.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _COUNT_FLIP_L = _lookup<ffi.Pointer<ffi.Int8>>('COUNT_FLIP_L');

  ffi.Pointer<ffi.Int8> get COUNT_FLIP_L => _COUNT_FLIP_L.value;

  set COUNT_FLIP_L(ffi.Pointer<ffi.Int8> value) => _COUNT_FLIP_L.value = value;

  /// precomputed count flip array
  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _COUNT_FLIP_R = _lookup<ffi.Pointer<ffi.Int8>>('COUNT_FLIP_R');

  ffi.Pointer<ffi.Int8> get COUNT_FLIP_R => _COUNT_FLIP_R.value;

  set COUNT_FLIP_R(ffi.Pointer<ffi.Int8> value) => _COUNT_FLIP_R.value = value;

  /// Array of functions to count flipped discs of the last move
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>>>
      _COUNT_LAST_FLIP =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>>>('COUNT_LAST_FLIP');

  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>> get COUNT_LAST_FLIP =>
      _COUNT_LAST_FLIP.value;

  set COUNT_LAST_FLIP(ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>> value) =>
      _COUNT_LAST_FLIP.value = value;

  /// evaluation function error coefficient parameters
  late final ffi.Pointer<ffi.Double> _EVAL_A = _lookup<ffi.Double>('EVAL_A');

  double get EVAL_A => _EVAL_A.value;

  set EVAL_A(double value) => _EVAL_A.value = value;

  late final ffi.Pointer<ffi.Double> _EVAL_B = _lookup<ffi.Double>('EVAL_B');

  double get EVAL_B => _EVAL_B.value;

  set EVAL_B(double value) => _EVAL_B.value = value;

  late final ffi.Pointer<ffi.Double> _EVAL_C = _lookup<ffi.Double>('EVAL_C');

  double get EVAL_C => _EVAL_C.value;

  set EVAL_C(double value) => _EVAL_C.value = value;

  /// feature symetry packing
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_C10 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_C10');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_C10 => _EVAL_C10.value;

  set EVAL_C10(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_C10.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_C9 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_C9');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_C9 => _EVAL_C9.value;

  set EVAL_C9(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_C9.value = value;

  /// array to convert features into coordinates
  late final ffi.Pointer<ffi.Pointer<FeatureToCoordinate>> _EVAL_F2X =
      _lookup<ffi.Pointer<FeatureToCoordinate>>('EVAL_F2X');

  ffi.Pointer<FeatureToCoordinate> get EVAL_F2X => _EVAL_F2X.value;

  set EVAL_F2X(ffi.Pointer<FeatureToCoordinate> value) => _EVAL_F2X.value = value;

  /// eval weight load status
  late final ffi.Pointer<ffi.Int32> _EVAL_LOADED = _lookup<ffi.Int32>('EVAL_LOADED');

  int get EVAL_LOADED => _EVAL_LOADED.value;

  set EVAL_LOADED(int value) => _EVAL_LOADED.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _EVAL_MAX_VALUE = _lookup<ffi.Pointer<ffi.Int32>>('EVAL_MAX_VALUE');

  ffi.Pointer<ffi.Int32> get EVAL_MAX_VALUE => _EVAL_MAX_VALUE.value;

  set EVAL_MAX_VALUE(ffi.Pointer<ffi.Int32> value) => _EVAL_MAX_VALUE.value = value;

  /// number of features
  late final ffi.Pointer<ffi.Int32> _EVAL_N_FEATURE = _lookup<ffi.Int32>('EVAL_N_FEATURE');

  int get EVAL_N_FEATURE => _EVAL_N_FEATURE.value;

  set EVAL_N_FEATURE(int value) => _EVAL_N_FEATURE.value = value;

  /// number of plies
  late final ffi.Pointer<ffi.Int32> _EVAL_N_PLY = _lookup<ffi.Int32>('EVAL_N_PLY');

  int get EVAL_N_PLY => _EVAL_N_PLY.value;

  set EVAL_N_PLY(int value) => _EVAL_N_PLY.value = value;

  /// number of (unpacked) weights
  late final ffi.Pointer<ffi.Int32> _EVAL_N_WEIGHT = _lookup<ffi.Int32>('EVAL_N_WEIGHT');

  int get EVAL_N_WEIGHT => _EVAL_N_WEIGHT.value;

  set EVAL_N_WEIGHT(int value) => _EVAL_N_WEIGHT.value = value;

  /// feature offset
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _EVAL_OFFSET = _lookup<ffi.Pointer<ffi.Int32>>('EVAL_OFFSET');

  ffi.Pointer<ffi.Int32> get EVAL_OFFSET => _EVAL_OFFSET.value;

  set EVAL_OFFSET(ffi.Pointer<ffi.Int32> value) => _EVAL_OFFSET.value = value;

  /// packed feature size
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _EVAL_PACKED_SIZE =
      _lookup<ffi.Pointer<ffi.Int32>>('EVAL_PACKED_SIZE');

  ffi.Pointer<ffi.Int32> get EVAL_PACKED_SIZE => _EVAL_PACKED_SIZE.value;

  set EVAL_PACKED_SIZE(ffi.Pointer<ffi.Int32> value) => _EVAL_PACKED_SIZE.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_S10 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_S10');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_S10 => _EVAL_S10.value;

  set EVAL_S10(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_S10.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_S4 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_S4');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_S4 => _EVAL_S4.value;

  set EVAL_S4(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_S4.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_S5 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_S5');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_S5 => _EVAL_S5.value;

  set EVAL_S5(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_S5.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_S6 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_S6');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_S6 => _EVAL_S6.value;

  set EVAL_S6(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_S6.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_S7 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_S7');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_S7 => _EVAL_S7.value;

  set EVAL_S7(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_S7.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int32>>> _EVAL_S8 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int32>>>('EVAL_S8');

  ffi.Pointer<ffi.Pointer<ffi.Int32>> get EVAL_S8 => _EVAL_S8.value;

  set EVAL_S8(ffi.Pointer<ffi.Pointer<ffi.Int32>> value) => _EVAL_S8.value = value;

  /// feature size
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _EVAL_SIZE = _lookup<ffi.Pointer<ffi.Int32>>('EVAL_SIZE');

  ffi.Pointer<ffi.Int32> get EVAL_SIZE => _EVAL_SIZE.value;

  set EVAL_SIZE(ffi.Pointer<ffi.Int32> value) => _EVAL_SIZE.value = value;

  /// eval weights
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int16>>>> _EVAL_WEIGHT =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int16>>>>('EVAL_WEIGHT');

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int16>>> get EVAL_WEIGHT => _EVAL_WEIGHT.value;

  set EVAL_WEIGHT(ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int16>>> value) => _EVAL_WEIGHT.value = value;

  /// array to convert coordinates into feature
  late final ffi.Pointer<ffi.Pointer<CoordinateToFeature>> _EVAL_X2F =
      _lookup<ffi.Pointer<CoordinateToFeature>>('EVAL_X2F');

  ffi.Pointer<CoordinateToFeature> get EVAL_X2F => _EVAL_X2F.value;

  set EVAL_X2F(ffi.Pointer<CoordinateToFeature> value) => _EVAL_X2F.value = value;

  late final ffi.Pointer<ffi.Double> _EVAL_a = _lookup<ffi.Double>('EVAL_a');

  double get EVAL_a => _EVAL_a.value;

  set EVAL_a(double value) => _EVAL_a.value = value;

  late final ffi.Pointer<ffi.Double> _EVAL_b = _lookup<ffi.Double>('EVAL_b');

  double get EVAL_b => _EVAL_b.value;

  set EVAL_b(double value) => _EVAL_b.value = value;

  late final ffi.Pointer<ffi.Double> _EVAL_c = _lookup<ffi.Double>('EVAL_c');

  double get EVAL_c => _EVAL_c.value;

  set EVAL_c(double value) => _EVAL_c.value = value;

  /// flip array (indexed with outflank, returns inner 6 bits)
  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_2_H = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_2_H');

  ffi.Pointer<ffi.Uint64> get FLIPPED_2_H => _FLIPPED_2_H.value;

  set FLIPPED_2_H(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_2_H.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_2_V = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_2_V');

  ffi.Pointer<ffi.Uint64> get FLIPPED_2_V => _FLIPPED_2_V.value;

  set FLIPPED_2_V(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_2_V.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_3_H = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_3_H');

  ffi.Pointer<ffi.Uint64> get FLIPPED_3_H => _FLIPPED_3_H.value;

  set FLIPPED_3_H(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_3_H.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_3_V = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_3_V');

  ffi.Pointer<ffi.Uint64> get FLIPPED_3_V => _FLIPPED_3_V.value;

  set FLIPPED_3_V(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_3_V.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_4_H = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_4_H');

  ffi.Pointer<ffi.Uint64> get FLIPPED_4_H => _FLIPPED_4_H.value;

  set FLIPPED_4_H(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_4_H.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_4_V = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_4_V');

  ffi.Pointer<ffi.Uint64> get FLIPPED_4_V => _FLIPPED_4_V.value;

  set FLIPPED_4_V(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_4_V.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_5_H = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_5_H');

  ffi.Pointer<ffi.Uint64> get FLIPPED_5_H => _FLIPPED_5_H.value;

  set FLIPPED_5_H(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_5_H.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _FLIPPED_5_V = _lookup<ffi.Pointer<ffi.Uint64>>('FLIPPED_5_V');

  ffi.Pointer<ffi.Uint64> get FLIPPED_5_V => _FLIPPED_5_V.value;

  set FLIPPED_5_V(ffi.Pointer<ffi.Uint64> value) => _FLIPPED_5_V.value = value;

  /// Hash entry initial value
  late final ffi.Pointer<GameHash> _GAME_HASH_INIT = _lookup<GameHash>('GAME_HASH_INIT');

  GameHash get GAME_HASH_INIT => _GAME_HASH_INIT.ref;

  /// initial statistics
  late final ffi.Pointer<GameStatistics> _GAME_STATISTICS_INIT = _lookup<GameStatistics>('GAME_STATISTICS_INIT');

  GameStatistics get GAME_STATISTICS_INIT => _GAME_STATISTICS_INIT.ref;

  late final ffi.Pointer<GGSClock> _GGS_CLOCK_INI = _lookup<GGSClock>('GGS_CLOCK_INI');

  GGSClock get GGS_CLOCK_INI => _GGS_CLOCK_INI.ref;

  late final ffi.Pointer<GGSMatchType> _GGS_MATCH_TYPE_INI = _lookup<GGSMatchType>('GGS_MATCH_TYPE_INI');

  GGSMatchType get GGS_MATCH_TYPE_INI => _GGS_MATCH_TYPE_INI.ref;

  /// conversion from an 8-bit line to the H1-H8 line
  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _H1_H8 = _lookup<ffi.Pointer<ffi.Uint64>>('H1_H8');

  ffi.Pointer<ffi.Uint64> get H1_H8 => _H1_H8.value;

  set H1_H8(ffi.Pointer<ffi.Uint64> value) => _H1_H8.value = value;

  /// HashData init value
  late final ffi.Pointer<HashData> _HASH_DATA_INIT = _lookup<HashData>('HASH_DATA_INIT');

  HashData get HASH_DATA_INIT => _HASH_DATA_INIT.ref;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<Level>>> _LEVEL = _lookup<ffi.Pointer<ffi.Pointer<Level>>>('LEVEL');

  ffi.Pointer<ffi.Pointer<Level>> get LEVEL => _LEVEL.value;

  set LEVEL(ffi.Pointer<ffi.Pointer<Level>> value) => _LEVEL.value = value;

  late final ffi.Pointer<Move> _MOVE_INIT = _lookup<Move>('MOVE_INIT');

  Move get MOVE_INIT => _MOVE_INIT.ref;

  late final ffi.Pointer<Move> _MOVE_PASS = _lookup<Move>('MOVE_PASS');

  Move get MOVE_PASS => _MOVE_PASS.ref;

  /// Conversion array: neighbour bits
  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _NEIGHBOUR = _lookup<ffi.Pointer<ffi.Uint64>>('NEIGHBOUR');

  ffi.Pointer<ffi.Uint64> get NEIGHBOUR => _NEIGHBOUR.value;

  set NEIGHBOUR(ffi.Pointer<ffi.Uint64> value) => _NEIGHBOUR.value = value;

  /// The list of french opening names
  late final ffi.Pointer<ffi.Pointer<PositionName>> _NOM_POSITION = _lookup<ffi.Pointer<PositionName>>('NOM_POSITION');

  ffi.Pointer<PositionName> get NOM_POSITION => _NOM_POSITION.value;

  set NOM_POSITION(ffi.Pointer<PositionName> value) => _NOM_POSITION.value = value;

  /// level with no selectivity
  late final ffi.Pointer<ffi.Int32> _NO_SELECTIVITY = _lookup<ffi.Int32>('NO_SELECTIVITY');

  int get NO_SELECTIVITY => _NO_SELECTIVITY.value;

  set NO_SELECTIVITY(int value) => _NO_SELECTIVITY.value = value;

  /// threshold values to try stability cutoff during NWS search
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _NWS_STABILITY_THRESHOLD =
      _lookup<ffi.Pointer<ffi.Int32>>('NWS_STABILITY_THRESHOLD');

  ffi.Pointer<ffi.Int32> get NWS_STABILITY_THRESHOLD => _NWS_STABILITY_THRESHOLD.value;

  set NWS_STABILITY_THRESHOLD(ffi.Pointer<ffi.Int32> value) => _NWS_STABILITY_THRESHOLD.value = value;

  /// The list of french & english opening names
  late final ffi.Pointer<ffi.Pointer<OpeningName>> _OPENING_NAME = _lookup<ffi.Pointer<OpeningName>>('OPENING_NAME');

  ffi.Pointer<OpeningName> get OPENING_NAME => _OPENING_NAME.value;

  set OPENING_NAME(ffi.Pointer<OpeningName> value) => _OPENING_NAME.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _OUTFLANK_2 = _lookup<ffi.Pointer<ffi.Uint8>>('OUTFLANK_2');

  ffi.Pointer<ffi.Uint8> get OUTFLANK_2 => _OUTFLANK_2.value;

  set OUTFLANK_2(ffi.Pointer<ffi.Uint8> value) => _OUTFLANK_2.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _OUTFLANK_3 = _lookup<ffi.Pointer<ffi.Uint8>>('OUTFLANK_3');

  ffi.Pointer<ffi.Uint8> get OUTFLANK_3 => _OUTFLANK_3.value;

  set OUTFLANK_3(ffi.Pointer<ffi.Uint8> value) => _OUTFLANK_3.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _OUTFLANK_4 = _lookup<ffi.Pointer<ffi.Uint8>>('OUTFLANK_4');

  ffi.Pointer<ffi.Uint8> get OUTFLANK_4 => _OUTFLANK_4.value;

  set OUTFLANK_4(ffi.Pointer<ffi.Uint8> value) => _OUTFLANK_4.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _OUTFLANK_5 = _lookup<ffi.Pointer<ffi.Uint8>>('OUTFLANK_5');

  ffi.Pointer<ffi.Uint8> get OUTFLANK_5 => _OUTFLANK_5.value;

  set OUTFLANK_5(ffi.Pointer<ffi.Uint8> value) => _OUTFLANK_5.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Uint8>> _OUTFLANK_7 = _lookup<ffi.Pointer<ffi.Uint8>>('OUTFLANK_7');

  ffi.Pointer<ffi.Uint8> get OUTFLANK_7 => _OUTFLANK_7.value;

  set OUTFLANK_7(ffi.Pointer<ffi.Uint8> value) => _OUTFLANK_7.value = value;

  /// The list of french opening names
  late final ffi.Pointer<ffi.Pointer<PositionName>> _POSITION_NAME =
      _lookup<ffi.Pointer<PositionName>>('POSITION_NAME');

  ffi.Pointer<PositionName> get POSITION_NAME => _POSITION_NAME.value;

  set POSITION_NAME(ffi.Pointer<PositionName> value) => _POSITION_NAME.value = value;

  /// threshold values to try stability cutoff during PVS search
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _PVS_STABILITY_THRESHOLD =
      _lookup<ffi.Pointer<ffi.Int32>>('PVS_STABILITY_THRESHOLD');

  ffi.Pointer<ffi.Int32> get PVS_STABILITY_THRESHOLD => _PVS_STABILITY_THRESHOLD.value;

  set PVS_STABILITY_THRESHOLD(ffi.Pointer<ffi.Int32> value) => _PVS_STABILITY_THRESHOLD.value = value;

  /// a quadrant id for each square
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _QUADRANT_ID = _lookup<ffi.Pointer<ffi.Int32>>('QUADRANT_ID');

  ffi.Pointer<ffi.Int32> get QUADRANT_ID => _QUADRANT_ID.value;

  set QUADRANT_ID(ffi.Pointer<ffi.Int32> value) => _QUADRANT_ID.value = value;

  /// square type
  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _SQUARE_TYPE = _lookup<ffi.Pointer<ffi.Int32>>('SQUARE_TYPE');

  ffi.Pointer<ffi.Int32> get SQUARE_TYPE => _SQUARE_TYPE.value;

  set SQUARE_TYPE(ffi.Pointer<ffi.Int32> value) => _SQUARE_TYPE.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int32>> _SQUARE_VALUE = _lookup<ffi.Pointer<ffi.Int32>>('SQUARE_VALUE');

  ffi.Pointer<ffi.Int32> get SQUARE_VALUE => _SQUARE_VALUE.value;

  set SQUARE_VALUE(ffi.Pointer<ffi.Int32> value) => _SQUARE_VALUE.value = value;

  /// coordinate to bit table converter
  late final ffi.Pointer<ffi.Pointer<ffi.Uint64>> _X_TO_BIT = _lookup<ffi.Pointer<ffi.Uint64>>('X_TO_BIT');

  ffi.Pointer<ffi.Uint64> get X_TO_BIT => _X_TO_BIT.value;

  set X_TO_BIT(ffi.Pointer<ffi.Uint64> value) => _X_TO_BIT.value = value;

  late final ffi.Pointer<ffi.Int32> ___daylight = _lookup<ffi.Int32>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> ___environ =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('__environ');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get __environ => ___environ.value;

  set __environ(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => ___environ.value = value;

  late final ffi.Pointer<ffi.Int64> ___timezone = _lookup<ffi.Int64>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => ___tzname.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> __sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('_sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get _sys_siglist => __sys_siglist.value;

  set _sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => __sys_siglist.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _admin_list =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('admin_list');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get admin_list => _admin_list.value;

  set admin_list(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _admin_list.value = value;

  /// @brief Count the number of bits set to one in an unsigned long long.
  ///
  /// This is the classical popcount function.
  /// Since 2007, it is part of the instruction set of some modern CPU,
  /// (>= barcelona for AMD or >= nelhacem for Intel). Alternatively,
  /// a fast SWAR algorithm, adding bits in parallel is provided here.
  /// This function is massively used to count discs on the board,
  /// the mobility, or the stability.
  ///
  /// @param b 64-bit integer to count bits of.
  /// @return the number of bits set.
  int bit_count(
    int arg0,
  ) {
    return _bit_count(
      arg0,
    );
  }

  late final _bit_countPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Uint64)>>('bit_count');
  late final _bit_count = _bit_countPtr.asFunction<int Function(int)>();

  late final ffi.Pointer<ffi.Int32> _book_verbose = _lookup<ffi.Int32>('book_verbose');

  int get book_verbose => _book_verbose.value;

  set book_verbose(int value) => _book_verbose.value = value;

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  void edax_book_count_bestpath(
    ffi.Pointer<Board> arg0,
    ffi.Pointer<Position> arg1,
  ) {
    return _edax_book_count_bestpath(
      arg0,
      arg1,
    );
  }

  late final _edax_book_count_bestpathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Board>, ffi.Pointer<Position>)>>(
          'edax_book_count_bestpath');
  late final _edax_book_count_bestpath =
      _edax_book_count_bestpathPtr.asFunction<void Function(ffi.Pointer<Board>, ffi.Pointer<Position>)>();

  void edax_book_load(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _edax_book_load(
      arg0,
    );
  }

  late final _edax_book_loadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>('edax_book_load');
  late final _edax_book_load = _edax_book_loadPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void edax_book_new(
    int arg0,
    int arg1,
  ) {
    return _edax_book_new(
      arg0,
      arg1,
    );
  }

  late final _edax_book_newPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32)>>('edax_book_new');
  late final _edax_book_new = _edax_book_newPtr.asFunction<void Function(int, int)>();

  void edax_book_off() {
    return _edax_book_off();
  }

  late final _edax_book_offPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_book_off');
  late final _edax_book_off = _edax_book_offPtr.asFunction<void Function()>();

  void edax_book_on() {
    return _edax_book_on();
  }

  late final _edax_book_onPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_book_on');
  late final _edax_book_on = _edax_book_onPtr.asFunction<void Function()>();

  void edax_book_randomness(
    int arg0,
  ) {
    return _edax_book_randomness(
      arg0,
    );
  }

  late final _edax_book_randomnessPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('edax_book_randomness');
  late final _edax_book_randomness = _edax_book_randomnessPtr.asFunction<void Function(int)>();

  void edax_book_show(
    ffi.Pointer<Position> arg0,
  ) {
    return _edax_book_show(
      arg0,
    );
  }

  late final _edax_book_showPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Position>)>>('edax_book_show');
  late final _edax_book_show = _edax_book_showPtr.asFunction<void Function(ffi.Pointer<Position>)>();

  void edax_book_stop_count_bestpath() {
    return _edax_book_stop_count_bestpath();
  }

  late final _edax_book_stop_count_bestpathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_book_stop_count_bestpath');
  late final _edax_book_stop_count_bestpath = _edax_book_stop_count_bestpathPtr.asFunction<void Function()>();

  int edax_can_move() {
    return _edax_can_move();
  }

  late final _edax_can_movePtr = _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('edax_can_move');
  late final _edax_can_move = _edax_can_movePtr.asFunction<int Function()>();

  void edax_get_board(
    ffi.Pointer<Board> arg0,
  ) {
    return _edax_get_board(
      arg0,
    );
  }

  late final _edax_get_boardPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Board>)>>('edax_get_board');
  late final _edax_get_board = _edax_get_boardPtr.asFunction<void Function(ffi.Pointer<Board>)>();

  void edax_get_bookmove(
    ffi.Pointer<MoveList> arg0,
  ) {
    return _edax_get_bookmove(
      arg0,
    );
  }

  late final _edax_get_bookmovePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MoveList>)>>('edax_get_bookmove');
  late final _edax_get_bookmove = _edax_get_bookmovePtr.asFunction<void Function(ffi.Pointer<MoveList>)>();

  int edax_get_bookmove_with_position(
    ffi.Pointer<MoveList> arg0,
    ffi.Pointer<Position> arg1,
  ) {
    return _edax_get_bookmove_with_position(
      arg0,
      arg1,
    );
  }

  late final _edax_get_bookmove_with_positionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MoveList>, ffi.Pointer<Position>)>>(
          'edax_get_bookmove_with_position');
  late final _edax_get_bookmove_with_position =
      _edax_get_bookmove_with_positionPtr.asFunction<int Function(ffi.Pointer<MoveList>, ffi.Pointer<Position>)>();

  int edax_get_bookmove_with_position_by_moves(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<MoveList> arg1,
    ffi.Pointer<Position> arg2,
  ) {
    return _edax_get_bookmove_with_position_by_moves(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _edax_get_bookmove_with_position_by_movesPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<MoveList>, ffi.Pointer<Position>)>>(
      'edax_get_bookmove_with_position_by_moves');
  late final _edax_get_bookmove_with_position_by_moves = _edax_get_bookmove_with_position_by_movesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<MoveList>, ffi.Pointer<Position>)>();

  int edax_get_current_player() {
    return _edax_get_current_player();
  }

  late final _edax_get_current_playerPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('edax_get_current_player');
  late final _edax_get_current_player = _edax_get_current_playerPtr.asFunction<int Function()>();

  int edax_get_disc(
    int arg0,
  ) {
    return _edax_get_disc(
      arg0,
    );
  }

  late final _edax_get_discPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('edax_get_disc');
  late final _edax_get_disc = _edax_get_discPtr.asFunction<int Function(int)>();

  void edax_get_last_move(
    ffi.Pointer<Move> arg0,
  ) {
    return _edax_get_last_move(
      arg0,
    );
  }

  late final _edax_get_last_movePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Move>)>>('edax_get_last_move');
  late final _edax_get_last_move = _edax_get_last_movePtr.asFunction<void Function(ffi.Pointer<Move>)>();

  int edax_get_mobility_count(
    int arg0,
  ) {
    return _edax_get_mobility_count(
      arg0,
    );
  }

  late final _edax_get_mobility_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('edax_get_mobility_count');
  late final _edax_get_mobility_count = _edax_get_mobility_countPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Int8> edax_get_moves(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _edax_get_moves(
      arg0,
    );
  }

  late final _edax_get_movesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>>('edax_get_moves');
  late final _edax_get_moves = _edax_get_movesPtr.asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ffi.Int8>)>();

  void edax_go() {
    return _edax_go();
  }

  late final _edax_goPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_go');
  late final _edax_go = _edax_goPtr.asFunction<void Function()>();

  void edax_hint(
    int arg0,
    ffi.Pointer<HintList> arg1,
  ) {
    return _edax_hint(
      arg0,
      arg1,
    );
  }

  late final _edax_hintPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<HintList>)>>('edax_hint');
  late final _edax_hint = _edax_hintPtr.asFunction<void Function(int, ffi.Pointer<HintList>)>();

  void edax_hint_next(
    ffi.Pointer<Hint> arg0,
  ) {
    return _edax_hint_next(
      arg0,
    );
  }

  late final _edax_hint_nextPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Hint>)>>('edax_hint_next');
  late final _edax_hint_next = _edax_hint_nextPtr.asFunction<void Function(ffi.Pointer<Hint>)>();

  void edax_hint_next_no_multipv_depth(
    ffi.Pointer<Hint> arg0,
  ) {
    return _edax_hint_next_no_multipv_depth(
      arg0,
    );
  }

  late final _edax_hint_next_no_multipv_depthPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Hint>)>>('edax_hint_next_no_multipv_depth');
  late final _edax_hint_next_no_multipv_depth =
      _edax_hint_next_no_multipv_depthPtr.asFunction<void Function(ffi.Pointer<Hint>)>();

  void edax_hint_prepare(
    ffi.Pointer<MoveList> arg0,
  ) {
    return _edax_hint_prepare(
      arg0,
    );
  }

  late final _edax_hint_preparePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MoveList>)>>('edax_hint_prepare');
  late final _edax_hint_prepare = _edax_hint_preparePtr.asFunction<void Function(ffi.Pointer<MoveList>)>();

  void edax_init() {
    return _edax_init();
  }

  late final _edax_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_init');
  late final _edax_init = _edax_initPtr.asFunction<void Function()>();

  int edax_is_game_over() {
    return _edax_is_game_over();
  }

  late final _edax_is_game_overPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('edax_is_game_over');
  late final _edax_is_game_over = _edax_is_game_overPtr.asFunction<int Function()>();

  late final ffi.Pointer<ffi.Pointer<Log>> _edax_log = _lookup<ffi.Pointer<Log>>('edax_log');

  ffi.Pointer<Log> get edax_log => _edax_log.value;

  set edax_log(ffi.Pointer<Log> value) => _edax_log.value = value;

  void edax_mode(
    int arg0,
  ) {
    return _edax_mode(
      arg0,
    );
  }

  late final _edax_modePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('edax_mode');
  late final _edax_mode = _edax_modePtr.asFunction<void Function(int)>();

  int edax_move(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _edax_move(
      arg0,
    );
  }

  late final _edax_movePtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>)>>('edax_move');
  late final _edax_move = _edax_movePtr.asFunction<int Function(ffi.Pointer<ffi.Int8>)>();

  void edax_new() {
    return _edax_new();
  }

  late final _edax_newPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_new');
  late final _edax_new = _edax_newPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Int8> edax_opening() {
    return _edax_opening();
  }

  late final _edax_openingPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function()>>('edax_opening');
  late final _edax_opening = _edax_openingPtr.asFunction<ffi.Pointer<ffi.Int8> Function()>();

  void edax_play(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _edax_play(
      arg0,
    );
  }

  late final _edax_playPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>('edax_play');
  late final _edax_play = _edax_playPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void edax_redo() {
    return _edax_redo();
  }

  late final _edax_redoPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_redo');
  late final _edax_redo = _edax_redoPtr.asFunction<void Function()>();

  void edax_rotate(
    int arg0,
  ) {
    return _edax_rotate(
      arg0,
    );
  }

  late final _edax_rotatePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('edax_rotate');
  late final _edax_rotate = _edax_rotatePtr.asFunction<void Function(int)>();

  void edax_set_option(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _edax_set_option(
      arg0,
      arg1,
    );
  }

  late final _edax_set_optionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>>('edax_set_option');
  late final _edax_set_option =
      _edax_set_optionPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>, ffi.Pointer<ffi.Int8>)>();

  void edax_setboard(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _edax_setboard(
      arg0,
    );
  }

  late final _edax_setboardPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int8>)>>('edax_setboard');
  late final _edax_setboard = _edax_setboardPtr.asFunction<void Function(ffi.Pointer<ffi.Int8>)>();

  void edax_stop() {
    return _edax_stop();
  }

  late final _edax_stopPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_stop');
  late final _edax_stop = _edax_stopPtr.asFunction<void Function()>();

  void edax_undo() {
    return _edax_undo();
  }

  late final _edax_undoPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_undo');
  late final _edax_undo = _edax_undoPtr.asFunction<void Function()>();

  void edax_version() {
    return _edax_version();
  }

  late final _edax_versionPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_version');
  late final _edax_version = _edax_versionPtr.asFunction<void Function()>();

  void edax_vmirror() {
    return _edax_vmirror();
  }

  late final _edax_vmirrorPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('edax_vmirror');
  late final _edax_vmirror = _edax_vmirrorPtr.asFunction<void Function()>();

  /// edge stability global data
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint8>>> _edge_stability =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Uint8>>>('edge_stability');

  ffi.Pointer<ffi.Pointer<ffi.Uint8>> get edge_stability => _edge_stability.value;

  set edge_stability(ffi.Pointer<ffi.Pointer<ffi.Uint8>> value) => _edge_stability.value = value;

  late final ffi.Pointer<ffi.Pointer<Log>> _engine_log = _lookup<ffi.Pointer<Log>>('engine_log');

  ffi.Pointer<Log> get engine_log => _engine_log.value;

  set engine_log(ffi.Pointer<Log> value) => _engine_log.value = value;

  /// a global variable used to display the search result
  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _engine_result = _lookup<ffi.Pointer<ffi.Int8>>('engine_result');

  ffi.Pointer<ffi.Int8> get engine_result => _engine_result.value;

  set engine_result(ffi.Pointer<ffi.Int8> value) => _engine_result.value = value;

  /// Array of functions to compute flipped discs
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Uint64)>>>>
      _flip =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Uint64)>>>>('flip');

  ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Uint64)>>> get flip => _flip.value;

  set flip(ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Uint64 Function(ffi.Uint64, ffi.Uint64)>>> value) =>
      _flip.value = value;

  late final ffi.Pointer<ffi.Pointer<Log>> _ggs_log = _lookup<ffi.Pointer<Log>>('ggs_log');

  ffi.Pointer<Log> get ggs_log => _ggs_log.value;

  set ggs_log(ffi.Pointer<Log> value) => _ggs_log.value = value;

  late final ffi.Pointer<ffi.Pointer<Log>> _gtp_log = _lookup<ffi.Pointer<Log>>('gtp_log');

  ffi.Pointer<Log> get gtp_log => _gtp_log.value;

  set gtp_log(ffi.Pointer<Log> value) => _gtp_log.value = value;

  /// hashing global data
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint64>>> _hash_move =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Uint64>>>('hash_move');

  ffi.Pointer<ffi.Pointer<ffi.Uint64>> get hash_move => _hash_move.value;

  set hash_move(ffi.Pointer<ffi.Pointer<ffi.Uint64>> value) => _hash_move.value = value;

  /// hashing global data
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Uint64>>> _hash_rank =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Uint64>>>('hash_rank');

  ffi.Pointer<ffi.Pointer<ffi.Uint64>> get hash_rank => _hash_rank.value;

  set hash_rank(ffi.Pointer<ffi.Pointer<ffi.Uint64>> value) => _hash_rank.value = value;

  late final ffi.Pointer<in6_addr> _in6addr_any = _lookup<in6_addr>('in6addr_any');

  in6_addr get in6addr_any => _in6addr_any.ref;

  late final ffi.Pointer<in6_addr> _in6addr_loopback = _lookup<in6_addr>('in6addr_loopback');

  in6_addr get in6addr_loopback => _in6addr_loopback.ref;

  /// a global string with the last result sent to avoid duplicate result lines
  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _last_line_sent = _lookup<ffi.Pointer<ffi.Int8>>('last_line_sent');

  ffi.Pointer<ffi.Int8> get last_line_sent => _last_line_sent.value;

  set last_line_sent(ffi.Pointer<ffi.Int8> value) => _last_line_sent.value = value;

  void libedax_initialize(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _libedax_initialize(
      arg0,
      arg1,
    );
  }

  late final _libedax_initializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>>(
          'libedax_initialize');
  late final _libedax_initialize =
      _libedax_initializePtr.asFunction<void Function(int, ffi.Pointer<ffi.Pointer<ffi.Int8>>)>();

  void libedax_terminate() {
    return _libedax_terminate();
  }

  late final _libedax_terminatePtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('libedax_terminate');
  late final _libedax_terminate = _libedax_terminatePtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Pointer<Log>> _nboard_log = _lookup<ffi.Pointer<Log>>('nboard_log');

  ffi.Pointer<Log> get nboard_log => _nboard_log.value;

  set nboard_log(ffi.Pointer<Log> value) => _nboard_log.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _optarg = _lookup<ffi.Pointer<ffi.Int8>>('optarg');

  ffi.Pointer<ffi.Int8> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Int8> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int32> _opterr = _lookup<ffi.Int32>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int32> _optind = _lookup<ffi.Int32>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  /// global options with default value
  late final ffi.Pointer<Options> _options = _lookup<Options>('options');

  Options get options => _options.ref;

  late final ffi.Pointer<ffi.Int32> _optopt = _lookup<ffi.Int32>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  late final ffi.Pointer<ffi.Pointer<Log>> _search_log = _lookup<ffi.Pointer<Log>>('search_log');

  ffi.Pointer<Log> get search_log => _search_log.value;

  set search_log(ffi.Pointer<Log> value) => _search_log.value = value;

  /// predefined selectivity
  late final ffi.Pointer<ffi.Pointer<Selectivity>> _selectivity_table =
      _lookup<ffi.Pointer<Selectivity>>('selectivity_table');

  ffi.Pointer<Selectivity> get selectivity_table => _selectivity_table.value;

  set selectivity_table(ffi.Pointer<Selectivity> value) => _selectivity_table.value = value;

  late final ffi.Pointer<ffi.Int32> _signgam = _lookup<ffi.Int32>('signgam');

  int get signgam => _signgam.value;

  set signgam(int value) => _signgam.value = value;

  late final ffi.Pointer<Statistics> _statistics = _lookup<Statistics>('statistics');

  Statistics get statistics => _statistics.ref;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr = _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin = _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout = _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _sys_errlist.value = value;

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_siglist1 =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_siglist => _sys_siglist1.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _sys_siglist1.value = value;

  /// @brief Time clock.
  ///
  /// Can be set as a real_clock or a cpu_clock.
  ///
  /// @return time in milliseconds.
  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function()>>> _time_clock =
      _lookup<ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function()>>>('time_clock');

  ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function()>> get time_clock => _time_clock.value;

  set time_clock(ffi.Pointer<ffi.NativeFunction<ffi.Int64 Function()>> value) => _time_clock.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Pointer<Log>> _xboard_log = _lookup<ffi.Pointer<Log>>('xboard_log');

  ffi.Pointer<Log> get xboard_log => _xboard_log.value;

  set xboard_log(ffi.Pointer<Log> value) => _xboard_log.value = value;
}

const int A1 = 0;

const int A2 = 8;

const int A3 = 16;

const int A4 = 24;

const int A5 = 32;

const int A6 = 40;

const int A7 = 48;

const int A8 = 56;

const int ACCESSPERMS = 511;

const int AF_ALG = 38;

const int AF_APPLETALK = 5;

const int AF_ASH = 18;

const int AF_ATMPVC = 8;

const int AF_ATMSVC = 20;

const int AF_AX25 = 3;

const int AF_BLUETOOTH = 31;

const int AF_BRIDGE = 7;

const int AF_CAIF = 37;

const int AF_CAN = 29;

const int AF_DECnet = 12;

const int AF_ECONET = 19;

const int AF_FILE = 1;

const int AF_IB = 27;

const int AF_IEEE802154 = 36;

const int AF_INET = 2;

const int AF_INET6 = 10;

const int AF_IPX = 4;

const int AF_IRDA = 23;

const int AF_ISDN = 34;

const int AF_IUCV = 32;

const int AF_KCM = 41;

const int AF_KEY = 15;

const int AF_LLC = 26;

const int AF_LOCAL = 1;

const int AF_MAX = 45;

const int AF_MPLS = 28;

const int AF_NETBEUI = 13;

const int AF_NETLINK = 16;

const int AF_NETROM = 6;

const int AF_NFC = 39;

const int AF_PACKET = 17;

const int AF_PHONET = 35;

const int AF_PPPOX = 24;

const int AF_QIPCRTR = 42;

const int AF_RDS = 21;

const int AF_ROSE = 11;

const int AF_ROUTE = 16;

const int AF_RXRPC = 33;

const int AF_SECURITY = 14;

const int AF_SMC = 43;

const int AF_SNA = 22;

const int AF_TIPC = 30;

const int AF_UNIX = 1;

const int AF_UNSPEC = 0;

const int AF_VSOCK = 40;

const int AF_WANPIPE = 25;

const int AF_X25 = 9;

const int AF_XDP = 44;

const int AIO_PRIO_DELTA_MAX = 20;

const int AI_ADDRCONFIG = 32;

const int AI_ALL = 16;

const int AI_CANONNAME = 2;

const int AI_NUMERICHOST = 4;

const int AI_NUMERICSERV = 1024;

const int AI_PASSIVE = 1;

const int AI_V4MAPPED = 8;

const int ALLPERMS = 4095;

const int B1 = 1;

const int B2 = 9;

const int B3 = 17;

const int B4 = 25;

const int B5 = 33;

const int B6 = 41;

const int B7 = 49;

const int B8 = 57;

const int BC_BASE_MAX = 99;

const int BC_DIM_MAX = 2048;

const int BC_SCALE_MAX = 99;

const int BC_STRING_MAX = 1000;

const int BIG_ENDIAN = 4321;

const int BLACK = 0;

const int BOARD_SIZE = 64;

const int BOOK = 1112493899;

const int BOOK_DEBUG = 0;

const double BRANCHING_FACTOR = 2.24;

const int BUFSIZ = 8192;

const int BUS_ADRALN = 1;

const int BUS_ADRALN1 = 1;

const int BUS_ADRERR = 2;

const int BUS_ADRERR1 = 2;

const int BUS_MCEERR_AO = 5;

const int BUS_MCEERR_AO1 = 5;

const int BUS_MCEERR_AR = 4;

const int BUS_MCEERR_AR1 = 4;

const int BUS_OBJERR = 3;

const int BUS_OBJERR1 = 3;

const int BYTE_ORDER = 1234;

class Base extends ffi.Struct {
  external ffi.Pointer<Game> game;

  @ffi.Int32()
  external int n_games;

  @ffi.Int32()
  external int size;
}

/// Bench result structure
class BenchResult extends ffi.Struct {
  @ffi.Uint64()
  external int T;

  @ffi.Uint64()
  external int n_nodes;

  @ffi.Int32()
  external int positions;

  external Lock lock;
}

/// Board : board representation
class Board extends ffi.Struct {
  /// < bitboard representation
  @ffi.Uint64()
  external int player;

  @ffi.Uint64()
  external int opponent;
}

/// HashTable of shapes
class BoardCache extends ffi.Struct {
  external ffi.Pointer<Board> array;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int mask;
}

/// struct Book
/// @brief The opening book.
class Book extends ffi.Struct {
  external UnnamedStruct18 date;

  external UnnamedStruct19 options;

  external UnnamedStruct20 stats;

  external ffi.Pointer<PositionArray> array;

  external ffi.Pointer<PositionStack> stack;

  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int n_nodes;

  @ffi.Int32()
  external int need_saving;

  @ffi.Array.multi([1])
  external ffi.Array<Random> random;

  external ffi.Pointer<Search> search;

  @ffi.Int32()
  external int count_bestpath_stop;
}

class BookCheckGame extends ffi.Struct {
  @ffi.Uint64()
  external int missing;

  @ffi.Uint64()
  external int good;

  @ffi.Uint64()
  external int bad;
}

/// Bound
class Bound extends ffi.Struct {
  @ffi.Int32()
  external int lower;

  @ffi.Int32()
  external int upper;
}

const int C1 = 2;

const int C2 = 10;

const int C3 = 18;

const int C4 = 26;

const int C5 = 34;

const int C6 = 42;

const int C7 = 50;

const int C8 = 58;

class CBoard extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Uint8> x;
}

const int CHARCLASS_NAME_MAX = 2048;

const int CLD_CONTINUED = 6;

const int CLD_CONTINUED1 = 6;

const int CLD_DUMPED = 3;

const int CLD_DUMPED1 = 3;

const int CLD_EXITED = 1;

const int CLD_EXITED1 = 1;

const int CLD_KILLED = 2;

const int CLD_KILLED1 = 2;

const int CLD_STOPPED = 5;

const int CLD_STOPPED1 = 5;

const int CLD_TRAPPED = 4;

const int CLD_TRAPPED1 = 4;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_REALTIME = 0;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_TAI = 11;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int COLL_WEIGHTS_MAX = 255;

const int COUNT_NODES = 7;

/// typedef conditional variable
typedef Condition = pthread_cond_t;

/// coordinate to feature conversion
class CoordinateToFeature extends ffi.Struct {
  @ffi.Int32()
  external int n_feature;

  @ffi.Array.multi([16])
  external ffi.Array<UnnamedStruct15> feature;
}

const int D1 = 3;

const int D2 = 11;

const int D3 = 19;

const int D4 = 27;

const int D5 = 35;

const int D6 = 43;

const int D7 = 51;

const int D8 = 59;

const int DEFFILEMODE = 438;

const int DELAYTIMER_MAX = 2147483647;

const int DEPTH_MIDGAME_TO_ENDGAME = 15;

const int DEPTH_TO_SHALLOW_SEARCH = 7;

const int E1 = 4;

const int E2 = 12;

const int E2BIG = 7;

const int E3 = 20;

const int E4 = 28;

const int E5 = 36;

const int E6 = 44;

const int E7 = 52;

const int E8 = 60;

const int EACCES = 13;

const int EADDRINUSE = 98;

const int EADDRNOTAVAIL = 99;

const int EADV = 68;

const int EAFNOSUPPORT = 97;

const int EAGAIN = 11;

const int EAI_AGAIN = -3;

const int EAI_BADFLAGS = -1;

const int EAI_FAIL = -4;

const int EAI_FAMILY = -6;

const int EAI_MEMORY = -10;

const int EAI_NONAME = -2;

const int EAI_OVERFLOW = -12;

const int EAI_SERVICE = -8;

const int EAI_SOCKTYPE = -7;

const int EAI_SYSTEM = -11;

const int EALREADY = 114;

const int EBADE = 52;

const int EBADF = 9;

const int EBADFD = 77;

const int EBADMSG = 74;

const int EBADR = 53;

const int EBADRQC = 56;

const int EBADSLT = 57;

const int EBFONT = 59;

const int EBUSY = 16;

const int ECANCELED = 125;

const int ECHILD = 10;

const int ECHRNG = 44;

const int ECOMM = 70;

const int ECONNABORTED = 103;

const int ECONNREFUSED = 111;

const int ECONNRESET = 104;

const int EDAX = 1162101080;

const String EDAX_NAME = 'Edax 4.4';

const int EDEADLK = 35;

const int EDEADLOCK = 35;

const int EDESTADDRREQ = 89;

const int EDOM = 33;

const int EDOTDOT = 73;

const int EDQUOT = 122;

const int EEXIST = 17;

const int EFAULT = 14;

const int EFBIG = 27;

const int EHOSTDOWN = 112;

const int EHOSTUNREACH = 113;

const int EHWPOISON = 133;

const int EIDRM = 43;

const int EILSEQ = 84;

const int EINPROGRESS = 115;

const int EINTR = 4;

const int EINVAL = 22;

const int EIO = 5;

const int EISCONN = 106;

const int EISDIR = 21;

const int EISNAM = 120;

const int EKEYEXPIRED = 127;

const int EKEYREJECTED = 129;

const int EKEYREVOKED = 128;

const int EL2HLT = 51;

const int EL2NSYNC = 45;

const int EL3HLT = 46;

const int EL3RST = 47;

const int ELIBACC = 79;

const int ELIBBAD = 80;

const int ELIBEXEC = 83;

const int ELIBMAX = 82;

const int ELIBSCN = 81;

const int ELNRNG = 48;

const int ELOOP = 40;

const int EMEDIUMTYPE = 124;

const int EMFILE = 24;

const int EMLINK = 31;

const int EMPTY = 2;

const int EMSGSIZE = 90;

const int EMULTIHOP = 72;

const int ENAMETOOLONG = 36;

const int ENAVAIL = 119;

const int ENETDOWN = 100;

const int ENETRESET = 102;

const int ENETUNREACH = 101;

const int ENFILE = 23;

const int ENGINE_N_POSITION = 1024;

const int ENOANO = 55;

const int ENOBUFS = 105;

const int ENOCSI = 50;

const int ENODATA = 61;

const int ENODEV = 19;

const int ENOENT = 2;

const int ENOEXEC = 8;

const int ENOKEY = 126;

const int ENOLCK = 37;

const int ENOLINK = 67;

const int ENOMEDIUM = 123;

const int ENOMEM = 12;

const int ENOMSG = 42;

const int ENONET = 64;

const int ENOPKG = 65;

const int ENOPROTOOPT = 92;

const int ENOSPC = 28;

const int ENOSR = 63;

const int ENOSTR = 60;

const int ENOSYS = 38;

const int ENOTBLK = 15;

const int ENOTCONN = 107;

const int ENOTDIR = 20;

const int ENOTEMPTY = 39;

const int ENOTNAM = 118;

const int ENOTRECOVERABLE = 131;

const int ENOTSOCK = 88;

const int ENOTSUP = 95;

const int ENOTTY = 25;

const int ENOTUNIQ = 76;

const int ENXIO = 6;

const int EOF = -1;

const int EOPNOTSUPP = 95;

const int EOVERFLOW = 75;

const int EOWNERDEAD = 130;

const int EPERM = 1;

const int EPFNOSUPPORT = 96;

const int EPIPE = 32;

const int EPROTO = 71;

const int EPROTONOSUPPORT = 93;

const int EPROTOTYPE = 91;

const int ERANGE = 34;

const int EREMCHG = 78;

const int EREMOTE = 66;

const int EREMOTEIO = 121;

const int ERESTART = 85;

const int ERFKILL = 132;

const int EROFS = 30;

const int ESHUTDOWN = 108;

const int ESOCKTNOSUPPORT = 94;

const int ESPIPE = 29;

const int ESRCH = 3;

const int ESRMNT = 69;

const int ESTALE = 116;

const int ESTRPIPE = 86;

const int ETC_MIN_DEPTH = 5;

const int ETIME = 62;

const int ETIMEDOUT = 110;

const int ETOOMANYREFS = 109;

const int ETXTBSY = 26;

const int EUCLEAN = 117;

const int EUNATCH = 49;

const int EUSERS = 87;

const int EVAL = 1163280716;

const int EWOULDBLOCK = 11;

const int EXDEV = 18;

const int EXFULL = 54;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int EXPR_NEST_MAX = 32;

/// Engine management data
class Engine extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<Event> event;

  /// Events
  external ffi.Pointer<Search> search;

  external UnnamedStruct25 last_position;

  @ffi.Int32()
  external int is_searching;
}

/// struct Eval
/// @brief evaluation function
class Eval extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> feature;

  /// !< discs' features
  @ffi.Int32()
  external int player;
}

/// Event management data
class Event extends ffi.Struct {
  /// !< flag allowing to loop, waiting for events
  @ffi.Int32()
  external int loop;

  /// !< ring of buffers
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> ring;

  /// !< size of the buffer ring
  @ffi.Int32()
  external int size;

  /// !< first position in the ring
  @ffi.Int32()
  external int first;

  /// !< one past the last position in the ring
  @ffi.Int32()
  external int end;

  /// !< thread
  @Thread()
  external int thread;

  /// !< spin lock
  @SpinLock()
  external int spin;

  /// !< lock
  external Lock lock;

  /// !< condition
  external Condition cond;
}

const int F1 = 5;

const int F2 = 13;

const int F3 = 21;

const int F4 = 29;

const int F5 = 37;

const int F6 = 45;

const int F7 = 53;

const int F8 = 61;

const int FAST_PERFT = 1;

const int FD_SETSIZE = 1024;

typedef FILE = _IO_FILE;

const int FILENAME_MAX = 4096;

const int FIOGETOWN = 35075;

const int FIOSETOWN = 35073;

const int FOPEN_MAX = 16;

const int FPE_CONDTRAP = 15;

const int FPE_CONDTRAP1 = 15;

const int FPE_FLTDIV = 3;

const int FPE_FLTDIV1 = 3;

const int FPE_FLTINV = 7;

const int FPE_FLTINV1 = 7;

const int FPE_FLTOVF = 4;

const int FPE_FLTOVF1 = 4;

const int FPE_FLTRES = 6;

const int FPE_FLTRES1 = 6;

const int FPE_FLTSUB = 8;

const int FPE_FLTSUB1 = 8;

const int FPE_FLTUND = 5;

const int FPE_FLTUND1 = 5;

const int FPE_FLTUNK = 14;

const int FPE_FLTUNK1 = 14;

const int FPE_INTDIV = 1;

const int FPE_INTDIV1 = 1;

const int FPE_INTOVF = 2;

const int FPE_INTOVF1 = 2;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = -2147483648;

const int FP_INFINITE = 1;

const int FP_INFINITE1 = 1;

const int FP_NAN = 0;

const int FP_NAN1 = 0;

const int FP_NORMAL = 4;

const int FP_NORMAL1 = 4;

const int FP_SUBNORMAL = 3;

const int FP_SUBNORMAL1 = 3;

const int FP_XSTATE_MAGIC1 = 1179670611;

const int FP_XSTATE_MAGIC2 = 1179670597;

const int FP_XSTATE_MAGIC2_SIZE = 4;

const int FP_ZERO = 2;

const int FP_ZERO1 = 2;

const int F_LOCK = 1;

const int F_OK = 0;

const int F_TEST = 3;

const int F_TLOCK = 2;

const int F_ULOCK = 0;

/// feature to coordinates conversion
class FeatureToCoordinate extends ffi.Struct {
  @ffi.Int32()
  external int n_square;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int32> x;
}

const int G1 = 6;

const int G2 = 14;

const int G3 = 22;

const int G4 = 30;

const int G5 = 38;

const int G6 = 46;

const int G7 = 54;

const int G8 = 62;

const int GAME_SIZE = 80;

class GGSAdmin extends ffi.Struct {
  /// < admin command
  external ffi.Pointer<ffi.Int8> command;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> name;
}

class GGSBoard extends ffi.Struct {
  /// < match request id
  external ffi.Pointer<ffi.Int8> id;

  @ffi.Array.multi([2])
  external ffi.Array<GGSPlayer> player;

  @ffi.Array.multi([1])
  external ffi.Array<GGSMatchType> match_type;

  @ffi.Array.multi([2])
  external ffi.Array<GGSClock> clock;

  /// < komi value
  @ffi.Double()
  external double komi;

  /// < join a new game ?
  @ffi.Int32()
  external int is_join;

  /// < update an existing game?
  @ffi.Int32()
  external int is_update;

  /// < move
  @ffi.Int32()
  external int move;

  /// < move number
  @ffi.Int32()
  external int move_no;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int8> color;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> board;

  /// < player on turn
  @ffi.Int8()
  external int turn;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int8> board_init;

  /// < first player
  @ffi.Int8()
  external int turn_init;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Int32> move_list;

  /// < number of played moves
  @ffi.Int32()
  external int move_list_n;
}

class GGSClient extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<GGSBoard> board;

  @ffi.Array.multi([1])
  external ffi.Array<GGSRequest> request;

  @ffi.Array.multi([1])
  external ffi.Array<GGSMatchOn> match_on;

  @ffi.Array.multi([1])
  external ffi.Array<GGSMatchOff> match_off;

  @ffi.Array.multi([1])
  external ffi.Array<GGSAdmin> admin;

  /// < ggs event
  external GGSEvent event;

  /// < Edax's name on GGS
  external ffi.Pointer<ffi.Int8> me;

  /// < is Edax playing ?
  @ffi.Int32()
  external int is_playing;

  /// < date of last refresh
  @ffi.Int64()
  external int last_refresh;

  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct26> loop;

  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct27> once;
}

/// GGS clock (to play a game)
class GGSClock extends ffi.Struct {
  /// < base time flag. true = NOT loss
  @ffi.Int32()
  external int ini_flag;

  /// < incremental time flag.  true = NOT additive
  @ffi.Int32()
  external int inc_flag;

  /// < extra time flag. true = NOT add
  @ffi.Int32()
  external int ext_flag;

  /// < number of moves allowed during base time
  @ffi.Int32()
  external int ini_move;

  /// < number of moves allowed during incremental time
  @ffi.Int32()
  external int inc_move;

  /// < number of moves allowed during extra time
  @ffi.Int32()
  external int ext_move;

  /// < base time in ms.
  @ffi.Int32()
  external int ini_time;

  /// < incremental time in ms.
  @ffi.Int32()
  external int inc_time;

  /// < extra time in ms.
  @ffi.Int32()
  external int ext_time;
}

class GGSEvent extends ffi.Struct {
  /// < socket
  @ffi.Int32()
  external int socket;

  /// < loop
  @ffi.Int32()
  external int loop;

  /// < read buffer
  external ffi.Pointer<ffi.Int8> buffer;

  /// < thread
  @Thread()
  external int thread;

  /// < lock
  external Lock lock;
}

class GGSMatchOff extends ffi.Struct {
  /// < match id
  external ffi.Pointer<ffi.Int8> id;

  @ffi.Array.multi([2])
  external ffi.Array<GGSPlayer> player;
}

class GGSMatchOn extends ffi.Struct {
  /// < match id
  external ffi.Pointer<ffi.Int8> id;

  @ffi.Array.multi([2])
  external ffi.Array<GGSPlayer> player;

  @ffi.Array.multi([1])
  external ffi.Array<GGSMatchType> match_type;
}

/// Match type description
class GGSMatchType extends ffi.Struct {
  /// < is game saved ?
  @ffi.Int32()
  external int is_saved;

  /// < is game rated ?
  @ffi.Int32()
  external int is_rated;

  /// < is game synchro ?
  @ffi.Int32()
  external int is_synchro;

  /// < is game komi ?
  @ffi.Int32()
  external int is_komi;

  /// < is game rand ?
  @ffi.Int32()
  external int is_rand;

  /// < is game anti ?
  @ffi.Int32()
  external int is_anti;

  /// < game disc number
  @ffi.Int32()
  external int discs;

  /// < game size
  @ffi.Int32()
  external int size;
}

/// GGS player
class GGSPlayer extends ffi.Struct {
  /// < player's name on GGS
  external ffi.Pointer<ffi.Int8> name;

  /// < player's rating
  @ffi.Double()
  external double rating;
}

class GGSRequest extends ffi.Struct {
  /// < match request id
  external ffi.Pointer<ffi.Int8> id;

  @ffi.Array.multi([2])
  external ffi.Array<GGSPlayer> player;

  @ffi.Array.multi([1])
  external ffi.Array<GGSMatchType> match_type;

  @ffi.Array.multi([2])
  external ffi.Array<GGSClock> clock;
}

const int GGS_BOARD_SIZE = 256;

class Game extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<Board> initial_board;

  external UnnamedStruct17 date;

  @ffi.Array.multi([2, 32])
  external ffi.Array<ffi.Array<ffi.Int8>> name;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Int8> move;

  @ffi.Int8()
  external int player;

  @ffi.Uint64()
  external int hash;
}

/// Hash entry;
class GameHash extends ffi.Struct {
  /// < board
  external Board board;

  /// < statistics
  external GameStatistics stats;

  /// < depth
  @ffi.Int32()
  external int depth;
}

/// HashTable
class GameHashTable extends ffi.Struct {
  /// < array of hash entries
  external ffi.Pointer<GameHash> array;

  /// < size
  @ffi.Int32()
  external int size;

  /// < mask
  @ffi.Int32()
  external int mask;

  /// < n_tries
  @ffi.Uint64()
  external int n_tries;

  /// < n_tries
  @ffi.Uint64()
  external int n_hits;
}

/// Gathered statistiscs
class GameStatistics extends ffi.Struct {
  @ffi.Uint64()
  external int n_moves;

  @ffi.Uint64()
  external int n_draws;

  @ffi.Uint64()
  external int n_losses;

  @ffi.Uint64()
  external int n_wins;

  @ffi.Uint64()
  external int n_passes;

  @ffi.Uint32()
  external int min_mobility;

  @ffi.Uint32()
  external int max_mobility;
}

/// struct GameStat
/// @brief Game statistics
class GameStats extends ffi.Struct {
  /// < game win count
  @ffi.Uint64()
  external int n_wins;

  /// < game draw count
  @ffi.Uint64()
  external int n_draws;

  /// < game loss count
  @ffi.Uint64()
  external int n_losses;

  /// < unterminated line count
  @ffi.Uint64()
  external int n_lines;
}

const int H1 = 7;

const int H2 = 15;

const int H3 = 23;

const int H4 = 31;

const int H5 = 39;

const int H6 = 47;

const int H7 = 55;

const int H8 = 63;

const int HASH_ALIGNED = 1;

const int HASH_N_WAY = 4;

const int HOST_NAME_MAX = 64;

const int HOST_NOT_FOUND = 1;

const int HOUR = 3600000;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

/// Hash  : item stored in the hash table
class Hash extends ffi.Struct {
  external Board board;

  external HashData data;
}

/// HashData : data stored in the hash table
class HashData extends ffi.Struct {
  /// !< depth
  @ffi.Uint8()
  external int depth;

  /// !< selectivity
  @ffi.Uint8()
  external int selectivity;

  /// !< search cost
  @ffi.Uint8()
  external int cost;

  /// !< dating technique
  @ffi.Uint8()
  external int date;

  /// !< lower bound of the position score
  @ffi.Int8()
  external int lower;

  /// !< upper bound of the position score
  @ffi.Int8()
  external int upper;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> move;
}

/// HashLock : lock for table entries
class HashLock extends ffi.Struct {
  @SpinLock()
  external int spin;
}

/// HashTable: position storage
class HashTable extends ffi.Struct {
  /// !< allocated memory
  external ffi.Pointer<ffi.Void> memory;

  /// !< hash table
  external ffi.Pointer<Hash> hash;

  /// !< table with locks
  external ffi.Pointer<HashLock> lock;

  /// !< a bit mask for hash entries
  @ffi.Uint64()
  external int hash_mask;

  /// !< a bit mask for lock entries
  @ffi.Uint32()
  external int lock_mask;

  /// !< hash table size
  @ffi.Int32()
  external int n_hash;

  /// !< number of locks
  @ffi.Int32()
  external int n_lock;

  /// !< date
  @ffi.Uint8()
  external int date;
}

/// Hint (for libEdax)
///
/// @author lavox
/// @date 2018/1/17
class Hint extends ffi.Struct {
  /// < searched depth(except book moves)
  @ffi.Int32()
  external int depth;

  /// < searched selectivity(except book moves)
  @ffi.Int32()
  external int selectivity;

  /// < best move found
  @ffi.Int32()
  external int move;

  /// < best score
  @ffi.Int32()
  external int score;

  /// < upper score(except book moves)
  @ffi.Int32()
  external int upper;

  /// < lower score(except book moves)
  @ffi.Int32()
  external int lower;

  @ffi.Array.multi([1])
  external ffi.Array<Line> pv;

  /// < searched time(except book moves)
  @ffi.Int64()
  external int time;

  /// < searched node count(except book moves)
  @ffi.Uint64()
  external int n_nodes;

  /// < book move origin
  @ffi.Int32()
  external int book_move;
}

/// Hint list (for libEdax)
///
/// @author lavox
/// @date 2018/1/17
class HintList extends ffi.Struct {
  @ffi.Array.multi([34])
  external ffi.Array<Hint> hint;

  @ffi.Int32()
  external int n_hints;
}

const int ILL_BADIADDR = 9;

const int ILL_BADIADDR1 = 9;

const int ILL_BADSTK = 8;

const int ILL_BADSTK1 = 8;

const int ILL_COPROC = 7;

const int ILL_COPROC1 = 7;

const int ILL_ILLADR = 3;

const int ILL_ILLADR1 = 3;

const int ILL_ILLOPC = 1;

const int ILL_ILLOPC1 = 1;

const int ILL_ILLOPN = 2;

const int ILL_ILLOPN1 = 2;

const int ILL_ILLTRP = 4;

const int ILL_ILLTRP1 = 4;

const int ILL_PRVOPC = 5;

const int ILL_PRVOPC1 = 5;

const int ILL_PRVREG = 6;

const int ILL_PRVREG1 = 6;

const int INADDR_ALLHOSTS_GROUP = 3758096385;

const int INADDR_ALLRTRS_GROUP = 3758096386;

const int INADDR_ALLSNOOPERS_GROUP = 3758096490;

const int INADDR_ANY = 0;

const int INADDR_BROADCAST = 4294967295;

const int INADDR_LOOPBACK = 2130706433;

const int INADDR_MAX_LOCAL_GROUP = 3758096639;

const int INADDR_NONE = 4294967295;

const int INADDR_UNSPEC_GROUP = 3758096384;

const int INET6_ADDRSTRLEN = 46;

const int INET_ADDRSTRLEN = 16;

const double INFINITY = double.infinity;

const int INT16_MAX = 32767;

const int INT16_MIN = -32768;

const int INT32_MAX = 2147483647;

const int INT32_MIN = -2147483648;

const int INT64_MAX = 9223372036854775807;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT8_MIN = -128;

const int INTMAX_MAX = 9223372036854775807;

const int INTMAX_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MAX = 9223372036854775807;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST8_MIN = -128;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MAX = 9223372036854775807;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST8_MIN = -128;

const int IN_CLASSA_HOST = 16777215;

const int IN_CLASSA_MAX = 128;

const int IN_CLASSA_NET = 4278190080;

const int IN_CLASSA_NSHIFT = 24;

const int IN_CLASSB_HOST = 65535;

const int IN_CLASSB_MAX = 65536;

const int IN_CLASSB_NET = 4294901760;

const int IN_CLASSB_NSHIFT = 16;

const int IN_CLASSC_HOST = 255;

const int IN_CLASSC_NET = 4294967040;

const int IN_CLASSC_NSHIFT = 8;

const int IN_LOOPBACKNET = 127;

const int IPPORT_BIFFUDP = 512;

const int IPPORT_CMDSERVER = 514;

const int IPPORT_DAYTIME = 13;

const int IPPORT_DISCARD = 9;

const int IPPORT_ECHO = 7;

const int IPPORT_EFSSERVER = 520;

const int IPPORT_EXECSERVER = 512;

const int IPPORT_FINGER = 79;

const int IPPORT_FTP = 21;

const int IPPORT_LOGINSERVER = 513;

const int IPPORT_MTP = 57;

const int IPPORT_NAMESERVER = 42;

const int IPPORT_NETSTAT = 15;

const int IPPORT_RESERVED = 1024;

const int IPPORT_RESERVED1 = 1024;

const int IPPORT_RJE = 77;

const int IPPORT_ROUTESERVER = 520;

const int IPPORT_SMTP = 25;

const int IPPORT_SUPDUP = 95;

const int IPPORT_SYSTAT = 11;

const int IPPORT_TELNET = 23;

const int IPPORT_TFTP = 69;

const int IPPORT_TIMESERVER = 37;

const int IPPORT_TTYLINK = 87;

const int IPPORT_USERRESERVED = 5000;

const int IPPORT_WHOIS = 43;

const int IPPORT_WHOSERVER = 513;

const int IPPROTO_AH = 51;

const int IPPROTO_AH1 = 51;

const int IPPROTO_BEETPH = 94;

const int IPPROTO_BEETPH1 = 94;

const int IPPROTO_COMP = 108;

const int IPPROTO_COMP1 = 108;

const int IPPROTO_DCCP = 33;

const int IPPROTO_DCCP1 = 33;

const int IPPROTO_DSTOPTS = 60;

const int IPPROTO_DSTOPTS1 = 60;

const int IPPROTO_EGP = 8;

const int IPPROTO_EGP1 = 8;

const int IPPROTO_ENCAP = 98;

const int IPPROTO_ENCAP1 = 98;

const int IPPROTO_ESP = 50;

const int IPPROTO_ESP1 = 50;

const int IPPROTO_FRAGMENT = 44;

const int IPPROTO_FRAGMENT1 = 44;

const int IPPROTO_GRE = 47;

const int IPPROTO_GRE1 = 47;

const int IPPROTO_HOPOPTS = 0;

const int IPPROTO_HOPOPTS1 = 0;

const int IPPROTO_ICMP = 1;

const int IPPROTO_ICMP1 = 1;

const int IPPROTO_ICMPV6 = 58;

const int IPPROTO_ICMPV61 = 58;

const int IPPROTO_IDP = 22;

const int IPPROTO_IDP1 = 22;

const int IPPROTO_IGMP = 2;

const int IPPROTO_IGMP1 = 2;

const int IPPROTO_IP = 0;

const int IPPROTO_IP1 = 0;

const int IPPROTO_IPIP = 4;

const int IPPROTO_IPIP1 = 4;

const int IPPROTO_IPV6 = 41;

const int IPPROTO_IPV61 = 41;

const int IPPROTO_MAX = 256;

const int IPPROTO_MH = 135;

const int IPPROTO_MH1 = 135;

const int IPPROTO_MPLS = 137;

const int IPPROTO_MPLS1 = 137;

const int IPPROTO_MTP = 92;

const int IPPROTO_MTP1 = 92;

const int IPPROTO_NONE = 59;

const int IPPROTO_NONE1 = 59;

const int IPPROTO_PIM = 103;

const int IPPROTO_PIM1 = 103;

const int IPPROTO_PUP = 12;

const int IPPROTO_PUP1 = 12;

const int IPPROTO_RAW = 255;

const int IPPROTO_RAW1 = 255;

const int IPPROTO_ROUTING = 43;

const int IPPROTO_ROUTING1 = 43;

const int IPPROTO_RSVP = 46;

const int IPPROTO_RSVP1 = 46;

const int IPPROTO_SCTP = 132;

const int IPPROTO_SCTP1 = 132;

const int IPPROTO_TCP = 6;

const int IPPROTO_TCP1 = 6;

const int IPPROTO_TP = 29;

const int IPPROTO_TP1 = 29;

const int IPPROTO_UDP = 17;

const int IPPROTO_UDP1 = 17;

const int IPPROTO_UDPLITE = 136;

const int IPPROTO_UDPLITE1 = 136;

const int IPV6_2292DSTOPTS = 4;

const int IPV6_2292HOPLIMIT = 8;

const int IPV6_2292HOPOPTS = 3;

const int IPV6_2292PKTINFO = 2;

const int IPV6_2292PKTOPTIONS = 6;

const int IPV6_2292RTHDR = 5;

const int IPV6_ADDRFORM = 1;

const int IPV6_ADDR_PREFERENCES = 72;

const int IPV6_ADD_MEMBERSHIP = 20;

const int IPV6_AUTHHDR = 10;

const int IPV6_AUTOFLOWLABEL = 70;

const int IPV6_CHECKSUM = 7;

const int IPV6_DONTFRAG = 62;

const int IPV6_DROP_MEMBERSHIP = 21;

const int IPV6_DSTOPTS = 59;

const int IPV6_FREEBIND = 78;

const int IPV6_HDRINCL = 36;

const int IPV6_HOPLIMIT = 52;

const int IPV6_HOPOPTS = 54;

const int IPV6_IPSEC_POLICY = 34;

const int IPV6_JOIN_ANYCAST = 27;

const int IPV6_JOIN_GROUP = 20;

const int IPV6_LEAVE_ANYCAST = 28;

const int IPV6_LEAVE_GROUP = 21;

const int IPV6_MINHOPCOUNT = 73;

const int IPV6_MTU = 24;

const int IPV6_MTU_DISCOVER = 23;

const int IPV6_MULTICAST_ALL = 29;

const int IPV6_MULTICAST_HOPS = 18;

const int IPV6_MULTICAST_IF = 17;

const int IPV6_MULTICAST_LOOP = 19;

const int IPV6_NEXTHOP = 9;

const int IPV6_ORIGDSTADDR = 74;

const int IPV6_PATHMTU = 61;

const int IPV6_PKTINFO = 50;

const int IPV6_PMTUDISC_DO = 2;

const int IPV6_PMTUDISC_DONT = 0;

const int IPV6_PMTUDISC_INTERFACE = 4;

const int IPV6_PMTUDISC_OMIT = 5;

const int IPV6_PMTUDISC_PROBE = 3;

const int IPV6_PMTUDISC_WANT = 1;

const int IPV6_RECVDSTOPTS = 58;

const int IPV6_RECVERR = 25;

const int IPV6_RECVFRAGSIZE = 77;

const int IPV6_RECVHOPLIMIT = 51;

const int IPV6_RECVHOPOPTS = 53;

const int IPV6_RECVORIGDSTADDR = 74;

const int IPV6_RECVPATHMTU = 60;

const int IPV6_RECVPKTINFO = 49;

const int IPV6_RECVRTHDR = 56;

const int IPV6_RECVTCLASS = 66;

const int IPV6_ROUTER_ALERT = 22;

const int IPV6_ROUTER_ALERT_ISOLATE = 30;

const int IPV6_RTHDR = 57;

const int IPV6_RTHDRDSTOPTS = 55;

const int IPV6_RTHDR_LOOSE = 0;

const int IPV6_RTHDR_STRICT = 1;

const int IPV6_RTHDR_TYPE_0 = 0;

const int IPV6_RXDSTOPTS = 59;

const int IPV6_RXHOPOPTS = 54;

const int IPV6_TCLASS = 67;

const int IPV6_TRANSPARENT = 75;

const int IPV6_UNICAST_HOPS = 16;

const int IPV6_UNICAST_IF = 76;

const int IPV6_V6ONLY = 26;

const int IPV6_XFRM_POLICY = 35;

const int IP_ADD_MEMBERSHIP = 35;

const int IP_ADD_SOURCE_MEMBERSHIP = 39;

const int IP_BIND_ADDRESS_NO_PORT = 24;

const int IP_BLOCK_SOURCE = 38;

const int IP_CHECKSUM = 23;

const int IP_DEFAULT_MULTICAST_LOOP = 1;

const int IP_DEFAULT_MULTICAST_TTL = 1;

const int IP_DROP_MEMBERSHIP = 36;

const int IP_DROP_SOURCE_MEMBERSHIP = 40;

const int IP_FREEBIND = 15;

const int IP_HDRINCL = 3;

const int IP_IPSEC_POLICY = 16;

const int IP_MAX_MEMBERSHIPS = 20;

const int IP_MINTTL = 21;

const int IP_MSFILTER = 41;

const int IP_MTU = 14;

const int IP_MTU_DISCOVER = 10;

const int IP_MULTICAST_ALL = 49;

const int IP_MULTICAST_IF = 32;

const int IP_MULTICAST_LOOP = 34;

const int IP_MULTICAST_TTL = 33;

const int IP_NODEFRAG = 22;

const int IP_OPTIONS = 4;

const int IP_ORIGDSTADDR = 20;

const int IP_PASSSEC = 18;

const int IP_PKTINFO = 8;

const int IP_PKTOPTIONS = 9;

const int IP_PMTUDISC = 10;

const int IP_PMTUDISC_DO = 2;

const int IP_PMTUDISC_DONT = 0;

const int IP_PMTUDISC_INTERFACE = 4;

const int IP_PMTUDISC_OMIT = 5;

const int IP_PMTUDISC_PROBE = 3;

const int IP_PMTUDISC_WANT = 1;

const int IP_RECVERR = 11;

const int IP_RECVFRAGSIZE = 25;

const int IP_RECVOPTS = 6;

const int IP_RECVORIGDSTADDR = 20;

const int IP_RECVRETOPTS = 7;

const int IP_RECVTOS = 13;

const int IP_RECVTTL = 12;

const int IP_RETOPTS = 7;

const int IP_ROUTER_ALERT = 5;

const int IP_TOS = 1;

const int IP_TRANSPARENT = 19;

const int IP_TTL = 2;

const int IP_UNBLOCK_SOURCE = 37;

const int IP_UNICAST_IF = 50;

const int IP_XFRM_POLICY = 17;

const int ITERATIVE_MIN_EMPTIES = 10;

const int ITIMER_PROF = 2;

const int ITIMER_REAL = 0;

const int ITIMER_VIRTUAL = 1;

const int KOGGE_STONE = 2;

const int LAVE = 1279350341;

const int LC_ADDRESS = 9;

const int LC_ADDRESS_MASK = 512;

const int LC_ALL = 6;

const int LC_ALL_MASK = 8127;

const int LC_COLLATE = 3;

const int LC_COLLATE_MASK = 8;

const int LC_CTYPE = 0;

const int LC_CTYPE_MASK = 1;

const int LC_IDENTIFICATION = 12;

const int LC_IDENTIFICATION_MASK = 4096;

const int LC_MEASUREMENT = 11;

const int LC_MEASUREMENT_MASK = 2048;

const int LC_MESSAGES = 5;

const int LC_MESSAGES_MASK = 32;

const int LC_MONETARY = 4;

const int LC_MONETARY_MASK = 16;

const int LC_NAME = 8;

const int LC_NAME_MASK = 256;

const int LC_NUMERIC = 1;

const int LC_NUMERIC_MASK = 2;

const int LC_PAPER = 7;

const int LC_PAPER_MASK = 128;

const int LC_TELEPHONE = 10;

const int LC_TELEPHONE_MASK = 1024;

const int LC_TIME = 2;

const int LC_TIME_MASK = 4;

const int LINE_MAX = 2048;

const int LITTLE_ENDIAN = 1234;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int LOGIN_NAME_MAX = 256;

const int L_INCR = 1;

const int L_SET = 0;

const int L_XTND = 2;

const int L_ctermid = 9;

const int L_tmpnam = 20;

/// levels
class Level extends ffi.Struct {
  @ffi.Int32()
  external int depth;

  /// search depth
  @ffi.Int32()
  external int selectivity;
}

/// (simple) sequence of a legal moves
class Line extends ffi.Struct {
  @ffi.Array.multi([80])
  external ffi.Array<ffi.Int8> move;

  @ffi.Int32()
  external int n_moves;

  @ffi.Int32()
  external int color;
}

/// struct Link
/// @brief a move (with its score) linking to another Position.
class Link extends ffi.Struct {
  /// < move score
  @ffi.Int8()
  external int score;

  /// < move coordinate
  @ffi.Uint8()
  external int move;
}

/// Typedef mutex to a personalized type for portability
typedef Lock = pthread_mutex_t;

/// @brief LogFile.
class Log extends ffi.Struct {
  external ffi.Pointer<FILE> f;

  external Lock lock;
}

const int MATH_ERREXCEPT = 2;

const int MATH_ERRNO = 1;

const int MAX_CANON = 255;

const int MAX_INPUT = 255;

const int MAX_MOVE = 32;

const int MAX_OBSERVER = 2;

const int MAX_THREADS = 64;

const int MB_LEN_MAX = 16;

/// A position and a move issued from it.
class MBoard extends ffi.Struct {
  external Board board;

  @ffi.Int32()
  external int x;
}

const int MCAST_BLOCK_SOURCE = 43;

const int MCAST_EXCLUDE = 0;

const int MCAST_INCLUDE = 1;

const int MCAST_JOIN_GROUP = 42;

const int MCAST_JOIN_SOURCE_GROUP = 46;

const int MCAST_LEAVE_GROUP = 45;

const int MCAST_LEAVE_SOURCE_GROUP = 47;

const int MCAST_MSFILTER = 48;

const int MCAST_UNBLOCK_SOURCE = 44;

const int MINSIGSTKSZ = 2048;

const int MOVELIST_SIZE = 256;

const int MOVE_GENERATOR = 1;

const int MOVE_GENERATOR_BITSCAN = 4;

const int MOVE_GENERATOR_CARRY = 1;

const int MOVE_GENERATOR_KINDERGARTEN = 2;

const int MOVE_GENERATOR_ROXANE = 5;

const int MOVE_GENERATOR_SSE = 3;

const int MQ_PRIO_MAX = 32768;

const int MSG_BATCH = 262144;

const int MSG_BATCH1 = 262144;

const int MSG_CMSG_CLOEXEC = 1073741824;

const int MSG_CMSG_CLOEXEC1 = 1073741824;

const int MSG_CONFIRM = 2048;

const int MSG_CONFIRM1 = 2048;

const int MSG_CTRUNC = 8;

const int MSG_CTRUNC1 = 8;

const int MSG_DONTROUTE = 4;

const int MSG_DONTROUTE1 = 4;

const int MSG_DONTWAIT = 64;

const int MSG_DONTWAIT1 = 64;

const int MSG_EOR = 128;

const int MSG_EOR1 = 128;

const int MSG_ERRQUEUE = 8192;

const int MSG_ERRQUEUE1 = 8192;

const int MSG_FASTOPEN = 536870912;

const int MSG_FASTOPEN1 = 536870912;

const int MSG_FIN = 512;

const int MSG_FIN1 = 512;

const int MSG_MORE = 32768;

const int MSG_MORE1 = 32768;

const int MSG_NOSIGNAL = 16384;

const int MSG_NOSIGNAL1 = 16384;

const int MSG_OOB = 1;

const int MSG_OOB1 = 1;

const int MSG_PEEK = 2;

const int MSG_PEEK1 = 2;

const int MSG_PROXY = 16;

const int MSG_PROXY1 = 16;

const int MSG_RST = 4096;

const int MSG_RST1 = 4096;

const int MSG_SYN = 1024;

const int MSG_SYN1 = 1024;

const int MSG_TRUNC = 32;

const int MSG_TRUNC1 = 32;

const int MSG_WAITALL = 256;

const int MSG_WAITALL1 = 256;

const int MSG_WAITFORONE = 65536;

const int MSG_WAITFORONE1 = 65536;

const int MSG_ZEROCOPY = 67108864;

const int MSG_ZEROCOPY1 = 67108864;

const int MULTIPV_DEPTH = 10;

const double M_1_PI = 0.3183098861837907;

const double M_2_PI = 0.6366197723675814;

const double M_2_SQRTPI = 1.1283791670955126;

const double M_E = 2.718281828459045;

const double M_LN10 = 2.302585092994046;

const double M_LN2 = 0.6931471805599453;

const double M_LOG10E = 0.4342944819032518;

const double M_LOG2E = 1.4426950408889634;

const double M_PI = 3.141592653589793;

const double M_PI_2 = 1.5707963267948966;

const double M_PI_4 = 0.7853981633974483;

const double M_SQRT1_2 = 0.7071067811865476;

const double M_SQRT2 = 1.4142135623730951;

/// move representation
class Move extends ffi.Struct {
  /// < bitboard representation of flipped squares
  @ffi.Uint64()
  external int flipped;

  /// < square played
  @ffi.Int32()
  external int x;

  /// < score for this move
  @ffi.Int32()
  external int score;

  /// < move cost
  @ffi.Uint32()
  external int cost;

  /// < next move in a MoveList
  external ffi.Pointer<Move> next;
}

/// Array of MBoard.
class MoveArray extends ffi.Struct {
  /// < dynamic array
  external ffi.Pointer<MBoard> item;

  /// < number of items in the array
  @ffi.Int32()
  external int n;

  /// < capacity of the array
  @ffi.Int32()
  external int size;
}

/// HashTable of position + move
class MoveHash extends ffi.Struct {
  external ffi.Pointer<MoveArray> array;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int mask;
}

/// (simple) list of a legal moves
class MoveList extends ffi.Struct {
  @ffi.Array.multi([34])
  external ffi.Array<Move> move;

  @ffi.Int32()
  external int n_moves;
}

const int NAME_MAX = 255;

const double NAN = double.nan;

const int NETDB_INTERNAL = -1;

const int NETDB_SUCCESS = 0;

const int NFDBITS = 64;

const int NGREG = 23;

const int NGROUPS_MAX = 65536;

const int NI_DGRAM = 16;

const int NI_MAXHOST = 1025;

const int NI_MAXSERV = 32;

const int NI_NAMEREQD = 8;

const int NI_NOFQDN = 4;

const int NI_NUMERICHOST = 1;

const int NI_NUMERICSERV = 2;

const int NOMOVE = 65;

const int NO_ADDRESS = 4;

const int NO_DATA = 4;

const int NO_RECOVERY = 3;

const int NSIG = 65;

/// A Node is a position in the search tree, containing information shared with
/// parallel threads.
class Node extends ffi.Struct {
  /// < bestmove
  @ffi.Int32()
  external int bestmove;

  /// < bestscore
  @ffi.Int32()
  external int bestscore;

  /// < alpha lower bound
  @ffi.Int32()
  external int alpha;

  /// < beta upper bound (is constant after initialisation)
  @ffi.Int32()
  external int beta;

  /// < pv_node
  @ffi.Int32()
  external int pv_node;

  /// < number of slaves splitted flag
  @ffi.Int32()
  external int n_slave;

  /// < stop point flag
  @ffi.Int32()
  external int stop_point;

  /// < waiting flag
  @ffi.Int32()
  external int is_waiting;

  /// < depth
  @ffi.Int32()
  external int depth;

  /// < height
  @ffi.Int32()
  external int height;

  /// < master search structure
  external ffi.Pointer<Search> search;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<Search>> slave;

  /// < master node
  external ffi.Pointer<Node> parent;

  /// < move to search
  external ffi.Pointer<Move> move;

  /// < search done
  @ffi.Int32()
  external int n_moves_done;

  /// < search todo
  @ffi.Int32()
  external int n_moves_todo;

  /// < waiting flag
  @ffi.Int32()
  external int is_helping;

  @ffi.Array.multi([1])
  external ffi.Array<Task> help;

  /// < mutex
  external Lock lock;

  /// < condition variable
  external Condition cond;
}

/// node type
abstract class NodeType {
  static const int PV_NODE = 0;
  static const int CUT_NODE = 1;
  static const int ALL_NODE = 2;
}

/// OBF structure: Othello Board File
class OBF extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<Board> board;

  /// <! Player on turn
  @ffi.Int32()
  external int player;

  @ffi.Array.multi([32])
  external ffi.Array<UnnamedStruct16> move;

  /// <! Move number
  @ffi.Int32()
  external int n_moves;

  /// <! Position score
  @ffi.Int32()
  external int best_score;

  /// <! Array of comments
  external ffi.Pointer<ffi.Int8> comments;
}

const int OBF_PARSE_END = 2;

const int OBF_PARSE_OK = 0;

const int OBF_PARSE_SKIP = 1;

const int OFF_SIDE = 3;

class OkoGame extends ffi.Struct {
  @ffi.Int8()
  external int n;

  @ffi.Int8()
  external int score;

  @ffi.Int8()
  external int flag;

  @ffi.Array.multi([61])
  external ffi.Array<ffi.Int8> move;
}

/// opening name structure
class OpeningName extends ffi.Struct {
  /// < move sequence
  external ffi.Pointer<ffi.Int8> line;

  /// < opening name
  external ffi.Pointer<ffi.Int8> name;
}

/// options to control various heuristics
typedef Options = UnnamedStruct1;

const int PARALLEL_PREFIX = 1;

const int PARSE_END_OF_FILE = 1;

const int PARSE_INVALID_TAG = 2;

const int PARSE_INVALID_VALUE = 3;

const int PARSE_OK = 0;

const int PASS = 64;

const int PATH_MAX = 4096;

const int PDP_ENDIAN = 3412;

const int PF_ALG = 38;

const int PF_APPLETALK = 5;

const int PF_ASH = 18;

const int PF_ATMPVC = 8;

const int PF_ATMSVC = 20;

const int PF_AX25 = 3;

const int PF_BLUETOOTH = 31;

const int PF_BRIDGE = 7;

const int PF_CAIF = 37;

const int PF_CAN = 29;

const int PF_DECnet = 12;

const int PF_ECONET = 19;

const int PF_FILE = 1;

const int PF_IB = 27;

const int PF_IEEE802154 = 36;

const int PF_INET = 2;

const int PF_INET6 = 10;

const int PF_IPX = 4;

const int PF_IRDA = 23;

const int PF_ISDN = 34;

const int PF_IUCV = 32;

const int PF_KCM = 41;

const int PF_KEY = 15;

const int PF_LLC = 26;

const int PF_LOCAL = 1;

const int PF_MAX = 45;

const int PF_MPLS = 28;

const int PF_NETBEUI = 13;

const int PF_NETLINK = 16;

const int PF_NETROM = 6;

const int PF_NFC = 39;

const int PF_PACKET = 17;

const int PF_PHONET = 35;

const int PF_PPPOX = 24;

const int PF_QIPCRTR = 42;

const int PF_RDS = 21;

const int PF_ROSE = 11;

const int PF_ROUTE = 16;

const int PF_RXRPC = 33;

const int PF_SECURITY = 14;

const int PF_SMC = 43;

const int PF_SNA = 22;

const int PF_TIPC = 30;

const int PF_UNIX = 1;

const int PF_UNSPEC = 0;

const int PF_VSOCK = 40;

const int PF_WANPIPE = 25;

const int PF_X25 = 9;

const int PF_XDP = 44;

const int PIPE_BUF = 4096;

const int PLAY_MESSAGE_MAX_LENGTH = 4096;

const int POLL_ERR = 4;

const int POLL_ERR1 = 4;

const int POLL_HUP = 6;

const int POLL_HUP1 = 6;

const int POLL_IN = 1;

const int POLL_IN1 = 1;

const int POLL_MSG = 3;

const int POLL_MSG1 = 3;

const int POLL_OUT = 2;

const int POLL_OUT1 = 2;

const int POLL_PRI = 5;

const int POLL_PRI1 = 5;

const int PRIO_MAX = 20;

const int PRIO_MIN = -20;

const int PRIO_PGRP = 1;

const int PRIO_PROCESS = 0;

const int PRIO_USER = 2;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_DESTRUCTOR_ITERATIONS = 4;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_KEYS_MAX = 1024;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_STACK_MIN = 16384;

const int PTRDIFF_MAX = 9223372036854775807;

const int PTRDIFF_MIN = -9223372036854775808;

const int PV_HASH_HEIGHT = 5;

const String P_tmpdir = '/tmp';

/// play structure
class Play extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<Board> board;

  @ffi.Array.multi([1])
  external ffi.Array<Board> initial_board;

  @ffi.Array.multi([1])
  external ffi.Array<Search> search;

  @ffi.Array.multi([1])
  external ffi.Array<Result> result;

  /// < opening book
  external ffi.Pointer<Book> book;

  /// < ui type
  @ffi.Int32()
  external int type;

  /// < current player's color.
  @ffi.Int32()
  external int player;

  /// < initial player's color.
  @ffi.Int32()
  external int initial_player;

  @ffi.Array.multi([80])
  external ffi.Array<Move> game;

  /// < current move index.
  @ffi.Int32()
  external int i_game;

  /// < last move index.
  @ffi.Int32()
  external int n_game;

  /// < current state
  @ffi.Int32()
  external int state;

  /// < search level
  @ffi.Int32()
  external int level;

  /// < internal clock
  @ffi.Int64()
  external int clock;

  @ffi.Array.multi([2])
  external ffi.Array<UnnamedStruct22> time;

  /// < forced line
  external UnnamedStruct23 force;

  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct24> ponder;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Int8> error_message;
}

/// Edax state.
abstract class PlayState {
  static const int IS_WAITING = 0;
  static const int IS_PONDERING = 1;
  static const int IS_ANALYZING = 2;
  static const int IS_THINKING = 3;
}

abstract class PlayType {
  static const int EDAX_FIXED_LEVEL = 0;
  static const int EDAX_TIME_PER_GAME = 1;
  static const int EDAX_TIME_PER_MOVE = 2;
}

/// Array of position.
class PosArray extends ffi.Struct {
  /// < dynamic array
  external ffi.Pointer<CBoard> item;

  /// < number of items in the array
  @ffi.Int32()
  external int n;

  /// < capacity of the array
  @ffi.Int32()
  external int size;
}

/// struct Position
/// @brief A position stored in the book.
class Position extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<Board> board;

  /// < best remaining move
  external Link leaf;

  /// < linking moves
  external ffi.Pointer<Link> link;

  /// < game win count
  @ffi.Uint32()
  external int n_wins;

  /// < game draw count
  @ffi.Uint32()
  external int n_draws;

  /// < game loss count
  @ffi.Uint32()
  external int n_losses;

  /// < unterminated line count
  @ffi.Uint32()
  external int n_lines;

  /// < Position value & bounds
  external UnnamedStruct21 score;

  /// < linking moves number
  @ffi.Uint8()
  external int n_link;

  /// < search level
  @ffi.Uint8()
  external int level;

  /// < done/undone flag
  @ffi.Uint8()
  external int done;

  /// < todo flag
  @ffi.Uint8()
  external int todo;

  /// < count of best paths for player
  @ffi.Uint16()
  external int n_player_bestpaths;

  /// < count of best paths for opponent
  @ffi.Uint16()
  external int n_opponent_bestpaths;
}

/// @brief An array with positions.
class PositionArray extends ffi.Struct {
  external ffi.Pointer<Position> positions;

  @ffi.Int32()
  external int n;

  @ffi.Int32()
  external int size;
}

/// HashTable of positions
class PositionHash extends ffi.Struct {
  external ffi.Pointer<PosArray> array;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int mask;
}

/// reverse opening name
class PositionName extends ffi.Struct {
  external Board board;

  external ffi.Pointer<ffi.Int8> name;
}

class PositionStack extends ffi.Opaque {}

const int RAND_MAX = 2147483647;

const double RCD = 0.5;

const int RELEASE = 4;

const int RE_DUP_MAX = 32767;

const int RLIMIT_AS = 9;

const int RLIMIT_CORE = 4;

const int RLIMIT_CPU = 0;

const int RLIMIT_DATA = 2;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_LOCKS = 10;

const int RLIMIT_MEMLOCK = 8;

const int RLIMIT_MSGQUEUE = 12;

const int RLIMIT_NICE = 13;

const int RLIMIT_NLIMITS = 16;

const int RLIMIT_NOFILE = 7;

const int RLIMIT_NPROC = 6;

const int RLIMIT_OFILE = 7;

const int RLIMIT_RSS = 5;

const int RLIMIT_RTPRIO = 14;

const int RLIMIT_RTTIME = 15;

const int RLIMIT_SIGPENDING = 11;

const int RLIMIT_STACK = 3;

const int RLIM_INFINITY = -1;

const int RLIM_NLIMITS = 16;

const int RLIM_SAVED_CUR = -1;

const int RLIM_SAVED_MAX = -1;

const int RTSIG_MAX = 32;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_SELF = 0;

const int R_OK = 4;

class Random extends ffi.Struct {
  @ffi.Uint64()
  external int x;
}

/// Result
class Result extends ffi.Struct {
  /// < searched depth
  @ffi.Int32()
  external int depth;

  /// < searched selectivity
  @ffi.Int32()
  external int selectivity;

  /// < best move found
  @ffi.Int32()
  external int move;

  /// < best score
  @ffi.Int32()
  external int score;

  @ffi.Array.multi([66])
  external ffi.Array<Bound> bound;

  @ffi.Array.multi([1])
  external ffi.Array<Line> pv;

  /// < searched time
  @ffi.Int64()
  external int time;

  /// < searched node count
  @ffi.Uint64()
  external int n_nodes;

  /// < book move origin
  @ffi.Int32()
  external int book_move;

  /// < total moves to search
  @ffi.Int32()
  external int n_moves;

  /// < left moves to search
  @ffi.Int32()
  external int n_moves_left;

  @SpinLock()
  external int spin;
}

const int SA_INTERRUPT = 536870912;

const int SA_NOCLDSTOP = 1;

const int SA_NOCLDWAIT = 2;

const int SA_NODEFER = 1073741824;

const int SA_NOMASK = 1073741824;

const int SA_ONESHOT = 2147483648;

const int SA_ONSTACK = 134217728;

const int SA_RESETHAND = 2147483648;

const int SA_RESTART = 268435456;

const int SA_SIGINFO = 4;

const int SA_STACK = 134217728;

const int SCHED_FIFO = 1;

const int SCHED_OTHER = 0;

const int SCHED_RR = 2;

const int SCM_RIGHTS = 1;

const int SCM_RIGHTS1 = 1;

const int SCM_TIMESTAMP = 29;

const int SCM_TIMESTAMPING = 37;

const int SCM_TIMESTAMPING_OPT_STATS = 54;

const int SCM_TIMESTAMPING_PKTINFO = 58;

const int SCM_TIMESTAMPNS = 35;

const int SCM_TXTIME = 61;

const int SCM_WIFI_STATUS = 41;

const int SCORE_INF = 127;

const int SCORE_MAX = 64;

const int SCORE_MIN = -64;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int SEGV_ACCADI = 5;

const int SEGV_ACCADI1 = 5;

const int SEGV_ACCERR = 2;

const int SEGV_ACCERR1 = 2;

const int SEGV_ADIDERR = 6;

const int SEGV_ADIDERR1 = 6;

const int SEGV_ADIPERR = 7;

const int SEGV_ADIPERR1 = 7;

const int SEGV_BNDERR = 3;

const int SEGV_BNDERR1 = 3;

const int SEGV_MAPERR = 1;

const int SEGV_MAPERR1 = 1;

const int SEGV_PKUERR = 4;

const int SEGV_PKUERR1 = 4;

const int SEM_VALUE_MAX = 2147483647;

const int SHUT_RD = 0;

const int SHUT_RD1 = 0;

const int SHUT_RDWR = 2;

const int SHUT_RDWR1 = 2;

const int SHUT_WR = 1;

const int SHUT_WR1 = 1;

const int SIGABRT = 6;

const int SIGALRM = 14;

const int SIGBUS = 7;

const int SIGCHLD = 17;

const int SIGCLD = 17;

const int SIGCONT = 18;

const int SIGEV_NONE = 1;

const int SIGEV_NONE1 = 1;

const int SIGEV_SIGNAL = 0;

const int SIGEV_SIGNAL1 = 0;

const int SIGEV_THREAD = 2;

const int SIGEV_THREAD1 = 2;

const int SIGEV_THREAD_ID = 4;

const int SIGEV_THREAD_ID1 = 4;

const int SIGFPE = 8;

const int SIGHUP = 1;

const int SIGILL = 4;

const int SIGINT = 2;

const int SIGIO = 29;

const int SIGIOT = 6;

const int SIGKILL = 9;

const int SIGPIPE = 13;

const int SIGPOLL = 29;

const int SIGPROF = 27;

const int SIGPWR = 30;

const int SIGQUIT = 3;

const int SIGSEGV = 11;

const int SIGSTKFLT = 16;

const int SIGSTKSZ = 8192;

const int SIGSTOP = 19;

const int SIGSYS = 31;

const int SIGTERM = 15;

const int SIGTRAP = 5;

const int SIGTSTP = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGURG = 23;

const int SIGUSR1 = 10;

const int SIGUSR2 = 12;

const int SIGVTALRM = 26;

const int SIGWINCH = 28;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_BLOCK = 0;

const int SIG_SETMASK = 2;

const int SIG_UNBLOCK = 1;

const int SIOCATMARK = 35077;

const int SIOCGPGRP = 35076;

const int SIOCGSTAMPNS_OLD = 35079;

const int SIOCGSTAMP_OLD = 35078;

const int SIOCSPGRP = 35074;

const int SIZE_MAX = -1;

const int SI_ASYNCIO = -4;

const int SI_ASYNCIO1 = -4;

const int SI_ASYNCNL = -60;

const int SI_ASYNCNL1 = -60;

const int SI_DETHREAD = -7;

const int SI_DETHREAD1 = -7;

const int SI_KERNEL = 128;

const int SI_KERNEL1 = 128;

const int SI_LOAD_SHIFT = 16;

const int SI_MESGQ = -3;

const int SI_MESGQ1 = -3;

const int SI_QUEUE = -1;

const int SI_QUEUE1 = -1;

const int SI_SIGIO = -5;

const int SI_SIGIO1 = -5;

const int SI_TIMER = -2;

const int SI_TIMER1 = -2;

const int SI_TKILL = -6;

const int SI_TKILL1 = -6;

const int SI_USER = 0;

const int SI_USER1 = 0;

const double SMP_C = 1.0;

const double SMP_W = 49.0;

const int SOCK_CLOEXEC = 524288;

const int SOCK_DCCP = 6;

const int SOCK_DGRAM = 2;

const int SOCK_NONBLOCK = 2048;

const int SOCK_PACKET = 10;

const int SOCK_RAW = 3;

const int SOCK_RDM = 4;

const int SOCK_SEQPACKET = 5;

const int SOCK_STREAM = 1;

const int SOL_AAL = 265;

const int SOL_ALG = 279;

const int SOL_ATM = 264;

const int SOL_BLUETOOTH = 274;

const int SOL_CAIF = 278;

const int SOL_DCCP = 269;

const int SOL_DECNET = 261;

const int SOL_ICMPV6 = 58;

const int SOL_IP = 0;

const int SOL_IPV6 = 41;

const int SOL_IRDA = 266;

const int SOL_IUCV = 277;

const int SOL_KCM = 281;

const int SOL_LLC = 268;

const int SOL_NETBEUI = 267;

const int SOL_NETLINK = 270;

const int SOL_NFC = 280;

const int SOL_PACKET = 263;

const int SOL_PNPIPE = 275;

const int SOL_PPPOL2TP = 273;

const int SOL_RAW = 255;

const int SOL_RDS = 276;

const int SOL_RXRPC = 272;

const int SOL_SOCKET = 1;

const int SOL_TCP = 6;

const int SOL_TIPC = 271;

const int SOL_TLS = 282;

const int SOL_X25 = 262;

const int SOL_XDP = 283;

const int SOMAXCONN = 4096;

const int SORT_ALPHA_DELTA = 8;

const int SO_ACCEPTCONN = 30;

const int SO_ATTACH_BPF = 50;

const int SO_ATTACH_FILTER = 26;

const int SO_ATTACH_REUSEPORT_CBPF = 51;

const int SO_ATTACH_REUSEPORT_EBPF = 52;

const int SO_BINDTODEVICE = 25;

const int SO_BINDTOIFINDEX = 62;

const int SO_BPF_EXTENSIONS = 48;

const int SO_BROADCAST = 6;

const int SO_BSDCOMPAT = 14;

const int SO_BUSY_POLL = 46;

const int SO_CNX_ADVICE = 53;

const int SO_COOKIE = 57;

const int SO_DEBUG = 1;

const int SO_DETACH_BPF = 27;

const int SO_DETACH_FILTER = 27;

const int SO_DETACH_REUSEPORT_BPF = 68;

const int SO_DOMAIN = 39;

const int SO_DONTROUTE = 5;

const int SO_ERROR = 4;

const int SO_GET_FILTER = 26;

const int SO_INCOMING_CPU = 49;

const int SO_INCOMING_NAPI_ID = 56;

const int SO_KEEPALIVE = 9;

const int SO_LINGER = 13;

const int SO_LOCK_FILTER = 44;

const int SO_MARK = 36;

const int SO_MAX_PACING_RATE = 47;

const int SO_MEMINFO = 55;

const int SO_NOFCS = 43;

const int SO_NO_CHECK = 11;

const int SO_OOBINLINE = 10;

const int SO_PASSCRED = 16;

const int SO_PASSSEC = 34;

const int SO_PEEK_OFF = 42;

const int SO_PEERCRED = 17;

const int SO_PEERGROUPS = 59;

const int SO_PEERNAME = 28;

const int SO_PEERSEC = 31;

const int SO_PRIORITY = 12;

const int SO_PROTOCOL = 38;

const int SO_RCVBUF = 8;

const int SO_RCVBUFFORCE = 33;

const int SO_RCVLOWAT = 18;

const int SO_RCVTIMEO = 20;

const int SO_RCVTIMEO_NEW = 66;

const int SO_RCVTIMEO_OLD = 20;

const int SO_REUSEADDR = 2;

const int SO_REUSEPORT = 15;

const int SO_RXQ_OVFL = 40;

const int SO_SECURITY_AUTHENTICATION = 22;

const int SO_SECURITY_ENCRYPTION_NETWORK = 24;

const int SO_SECURITY_ENCRYPTION_TRANSPORT = 23;

const int SO_SELECT_ERR_QUEUE = 45;

const int SO_SNDBUF = 7;

const int SO_SNDBUFFORCE = 32;

const int SO_SNDLOWAT = 19;

const int SO_SNDTIMEO = 21;

const int SO_SNDTIMEO_NEW = 67;

const int SO_SNDTIMEO_OLD = 21;

const int SO_TIMESTAMP = 29;

const int SO_TIMESTAMPING = 37;

const int SO_TIMESTAMPING_NEW = 65;

const int SO_TIMESTAMPING_OLD = 37;

const int SO_TIMESTAMPNS = 35;

const int SO_TIMESTAMPNS_NEW = 64;

const int SO_TIMESTAMPNS_OLD = 35;

const int SO_TIMESTAMP_NEW = 63;

const int SO_TIMESTAMP_OLD = 29;

const int SO_TXTIME = 61;

const int SO_TYPE = 3;

const int SO_WIFI_STATUS = 41;

const int SO_ZEROCOPY = 60;

const int SPLIT_MAX_SLAVES = 3;

const int SPLIT_MIN_DEPTH = 5;

const int SPLIT_MIN_MOVES_TODO = 1;

const int SS_DISABLE = 2;

const int SS_DISABLE1 = 2;

const int SS_ONSTACK = 1;

const int SS_ONSTACK1 = 1;

const int STDERR_FILENO = 2;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int S_BLKSIZE = 512;

const int S_IEXEC = 64;

const int S_IFBLK = 24576;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFIFO = 4096;

const int S_IFLNK = 40960;

const int S_IFMT = 61440;

const int S_IFREG = 32768;

const int S_IFSOCK = 49152;

const int S_IREAD = 256;

const int S_IRGRP = 32;

const int S_IROTH = 4;

const int S_IRUSR = 256;

const int S_IRWXG = 56;

const int S_IRWXO = 7;

const int S_IRWXU = 448;

const int S_ISGID = 1024;

const int S_ISUID = 2048;

const int S_ISVTX = 512;

const int S_IWGRP = 16;

const int S_IWOTH = 2;

const int S_IWRITE = 128;

const int S_IWUSR = 128;

const int S_IXGRP = 8;

const int S_IXOTH = 1;

const int S_IXUSR = 64;

/// search stare
class Search extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<Board> board;

  @ffi.Array.multi([66])
  external ffi.Array<SquareList> empties;

  @ffi.Array.multi([66])
  external ffi.Array<ffi.Pointer<SquareList>> x_to_empties;

  /// < number of empty squares
  @ffi.Int32()
  external int n_empties;

  /// < player color
  @ffi.Int32()
  external int player;

  /// < search id
  @ffi.Int32()
  external int id;

  @ffi.Array.multi([1])
  external ffi.Array<HashTable> hash_table;

  @ffi.Array.multi([1])
  external ffi.Array<HashTable> pv_table;

  @ffi.Array.multi([1])
  external ffi.Array<HashTable> shallow_table;

  @ffi.Array.multi([1])
  external ffi.Array<Eval> eval;

  @ffi.Array.multi([1])
  external ffi.Array<Random> random;

  /// < available task queue
  external ffi.Pointer<TaskStack> tasks;

  /// < search task
  external ffi.Pointer<Task> task;

  /// < search lock
  @SpinLock()
  external int spin;

  /// < parent search
  external ffi.Pointer<Search> parent;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Pointer<Search>> child;

  /// < master search (parent of all searches)
  external ffi.Pointer<Search> master;

  /// < search child number
  @ffi.Int32()
  external int n_child;

  /// < depth level
  @ffi.Int32()
  external int depth;

  /// < selectivity level
  @ffi.Int32()
  external int selectivity;

  /// < probcut recursivity level
  @ffi.Int32()
  external int probcut_level;

  /// < parity
  @ffi.Uint32()
  external int parity;

  /// < depth for pv_extension
  @ffi.Int32()
  external int depth_pv_extension;

  /// < thinking status
  @ffi.Int32()
  external int stop;

  /// < allow parallelism
  @ffi.Int32()
  external int allow_node_splitting;

  /// < time
  external UnnamedStruct4 time;

  @ffi.Array.multi([1])
  external ffi.Array<MoveList> movelist;

  /// < search height from root
  @ffi.Int32()
  external int height;

  @ffi.Array.multi([80])
  external ffi.Array<ffi.Int32> node_type;

  /// < score bounds according to stable squares
  external Bound stability_bound;

  /// < local (threadable) options.
  external UnnamedStruct5 options;

  /// < shared result
  external ffi.Pointer<Result> result;

  /// < call back function to print search result
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Result>)>> observer;

  /// < node counter
  @ffi.Uint64()
  external int n_nodes;

  /// < node counter
  @ffi.Uint64()
  external int child_nodes;
}

/// Selectivity probcut
class Selectivity extends ffi.Struct {
  /// < selectivity value
  @ffi.Double()
  external double t;

  /// < level of selectivity
  @ffi.Int32()
  external int level;

  /// < selectivity value as a percentage
  @ffi.Int32()
  external int percent;
}

/// Array of shape.
class ShapeArray extends ffi.Struct {
  /// < dynamic array
  external ffi.Pointer<ffi.Uint64> item;

  /// < number of items in the array
  @ffi.Int32()
  external int n;

  /// < capacity of the array
  @ffi.Int32()
  external int size;
}

/// HashTable of shapes
class ShapeHash extends ffi.Struct {
  external ffi.Pointer<ShapeArray> array;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int mask;
}

/// Typedef spinlock (=fast mutex) to a personalized type for portability
typedef SpinLock = pthread_spinlock_t;

/// double linked list of squares
class SquareList extends ffi.Struct {
  /// !< bit representation of the square location
  @ffi.Uint64()
  external int b;

  /// !< square location
  @ffi.Int32()
  external int x;

  /// !< parity quadrant
  @ffi.Int32()
  external int quadrant;

  /// !< link to previous square
  external ffi.Pointer<SquareList> previous;

  /// !< link to next square
  external ffi.Pointer<SquareList> next;
}

/// \struct Statistics
class Statistics extends ffi.Struct {
  @ffi.Uint64()
  external int n_nodes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint64> n_task_nodes;

  @ffi.Array.multi([64])
  external ffi.Array<ffi.Uint64> n_task;

  @ffi.Uint64()
  external int n_parallel_nodes;

  @ffi.Uint64()
  external int n_hash_update;

  @ffi.Uint64()
  external int n_hash_upgrade;

  @ffi.Uint64()
  external int n_hash_new;

  @ffi.Uint64()
  external int n_hash_remove;

  @ffi.Uint64()
  external int n_hash_search;

  @ffi.Uint64()
  external int n_hash_found;

  @ffi.Uint64()
  external int n_hash_collision;

  @ffi.Uint64()
  external int n_hash_n;

  @ffi.Uint64()
  external int n_PVS_root;

  @ffi.Uint64()
  external int n_PVS_midgame;

  @ffi.Uint64()
  external int n_NWS_midgame;

  @ffi.Uint64()
  external int n_NWS_endgame;

  @ffi.Uint64()
  external int n_PVS_shallow;

  @ffi.Uint64()
  external int n_NWS_shallow;

  @ffi.Uint64()
  external int n_search_solve;

  @ffi.Uint64()
  external int n_search_solve_0;

  @ffi.Uint64()
  external int n_board_solve_2;

  @ffi.Uint64()
  external int n_search_solve_3;

  @ffi.Uint64()
  external int n_search_solve_4;

  @ffi.Uint64()
  external int n_search_eval_0;

  @ffi.Uint64()
  external int n_search_eval_1;

  @ffi.Uint64()
  external int n_search_eval_2;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint64> n_cut_at_move_number;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint64> n_nocut_at_move_number;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint64> n_best_at_move_number;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint64> n_move_number;

  @ffi.Uint64()
  external int n_split_try;

  @ffi.Uint64()
  external int n_split_success;

  @ffi.Uint64()
  external int n_master_helper;

  @ffi.Uint64()
  external int n_waited_slave;

  @ffi.Uint64()
  external int n_stopped_slave;

  @ffi.Uint64()
  external int n_stopped_master;

  @ffi.Uint64()
  external int n_wake_up;

  @ffi.Uint64()
  external int n_hash_try;

  @ffi.Uint64()
  external int n_hash_low_cutoff;

  @ffi.Uint64()
  external int n_hash_high_cutoff;

  @ffi.Uint64()
  external int n_stability_try;

  @ffi.Uint64()
  external int n_stability_low_cutoff;

  @ffi.Uint64()
  external int n_probcut_try;

  @ffi.Uint64()
  external int n_probcut_low_try;

  @ffi.Uint64()
  external int n_probcut_low_cutoff;

  @ffi.Uint64()
  external int n_probcut_high_try;

  @ffi.Uint64()
  external int n_probcut_high_cutoff;

  @ffi.Uint64()
  external int n_etc_try;

  @ffi.Uint64()
  external int n_etc_high_cutoff;

  @ffi.Uint64()
  external int n_esc_high_cutoff;

  @ffi.Array.multi([64, 10])
  external ffi.Array<ffi.Array<ffi.Uint64>> n_played_square;

  @ffi.Array.multi([64, 10])
  external ffi.Array<ffi.Array<ffi.Uint64>> n_good_square;

  @ffi.Uint64()
  external int n_NWS_candidate;

  @ffi.Uint64()
  external int n_NWS_bad_candidate;
}

/// constants for search interruption
abstract class Stop {
  static const int RUNNING = 0;
  static const int STOP_PARALLEL_SEARCH = 1;
  static const int STOP_PONDERING = 2;
  static const int STOP_TIMEOUT = 3;
  static const int STOP_ON_DEMAND = 4;
  static const int STOP_END = 5;
}

const int TCPI_OPT_ECN = 8;

const int TCPI_OPT_ECN_SEEN = 16;

const int TCPI_OPT_SACK = 2;

const int TCPI_OPT_SYN_DATA = 32;

const int TCPI_OPT_TIMESTAMPS = 1;

const int TCPI_OPT_WSCALE = 4;

const int TCPOLEN_MAXSEG = 4;

const int TCPOLEN_SACK_PERMITTED = 2;

const int TCPOLEN_TIMESTAMP = 10;

const int TCPOLEN_TSTAMP_APPA = 12;

const int TCPOLEN_WINDOW = 3;

const int TCPOPT_EOL = 0;

const int TCPOPT_MAXSEG = 2;

const int TCPOPT_NOP = 1;

const int TCPOPT_SACK = 5;

const int TCPOPT_SACK_PERMITTED = 4;

const int TCPOPT_TIMESTAMP = 8;

const int TCPOPT_TSTAMP_HDR = 16844810;

const int TCPOPT_WINDOW = 3;

const int TCP_CC_INFO = 26;

const int TCP_CLOSE = 7;

const int TCP_CLOSE_WAIT = 8;

const int TCP_CLOSING = 11;

const int TCP_CM_INQ = 36;

const int TCP_CONGESTION = 13;

const int TCP_COOKIE_IN_ALWAYS = 1;

const int TCP_COOKIE_MAX = 16;

const int TCP_COOKIE_MIN = 8;

const int TCP_COOKIE_OUT_NEVER = 2;

const int TCP_COOKIE_PAIR_SIZE = 32;

const int TCP_COOKIE_TRANSACTIONS = 15;

const int TCP_CORK = 3;

const int TCP_DEFER_ACCEPT = 9;

const int TCP_ESTABLISHED = 1;

const int TCP_FASTOPEN = 23;

const int TCP_FASTOPEN_CONNECT = 30;

const int TCP_FASTOPEN_KEY = 33;

const int TCP_FASTOPEN_NO_COOKIE = 34;

const int TCP_FIN_WAIT1 = 4;

const int TCP_FIN_WAIT2 = 5;

const int TCP_INFO = 11;

const int TCP_INQ = 36;

const int TCP_KEEPCNT = 6;

const int TCP_KEEPIDLE = 4;

const int TCP_KEEPINTVL = 5;

const int TCP_LAST_ACK = 9;

const int TCP_LINGER2 = 8;

const int TCP_LISTEN = 10;

const int TCP_MAXSEG = 2;

const int TCP_MAXWIN = 65535;

const int TCP_MAX_WINSHIFT = 14;

const int TCP_MD5SIG = 14;

const int TCP_MD5SIG_EXT = 32;

const int TCP_MD5SIG_FLAG_PREFIX = 1;

const int TCP_MD5SIG_MAXKEYLEN = 80;

const int TCP_MSS = 512;

const int TCP_MSS_DEFAULT = 536;

const int TCP_MSS_DESIRED = 1220;

const int TCP_NODELAY = 1;

const int TCP_NOTSENT_LOWAT = 25;

const int TCP_NO_QUEUE = 0;

const int TCP_QUEUES_NR = 3;

const int TCP_QUEUE_SEQ = 21;

const int TCP_QUICKACK = 12;

const int TCP_RECV_QUEUE = 1;

const int TCP_REPAIR = 19;

const int TCP_REPAIR_OFF = 0;

const int TCP_REPAIR_OFF_NO_WP = -1;

const int TCP_REPAIR_ON = 1;

const int TCP_REPAIR_OPTIONS = 22;

const int TCP_REPAIR_QUEUE = 20;

const int TCP_REPAIR_WINDOW = 29;

const int TCP_SAVED_SYN = 28;

const int TCP_SAVE_SYN = 27;

const int TCP_SEND_QUEUE = 2;

const int TCP_SYNCNT = 7;

const int TCP_SYN_RECV = 3;

const int TCP_SYN_SENT = 2;

const int TCP_S_DATA_IN = 4;

const int TCP_S_DATA_OUT = 8;

const int TCP_THIN_DUPACK = 17;

const int TCP_THIN_LINEAR_TIMEOUTS = 16;

const int TCP_TIMESTAMP = 24;

const int TCP_TIME_WAIT = 6;

const int TCP_TX_DELAY = 37;

const int TCP_ULP = 31;

const int TCP_USER_TIMEOUT = 18;

const int TCP_WINDOW_CLAMP = 10;

const int TCP_ZEROCOPY_RECEIVE = 35;

const int TH_ACK = 16;

const int TH_FIN = 1;

const int TH_PUSH = 8;

const int TH_RST = 4;

const int TH_SYN = 2;

const int TH_URG = 32;

const int TIMER_ABSTIME = 1;

const int TIME_MAX = 31557600000000;

const int TIME_UTC = 1;

const int TMP_MAX = 238328;

const int TRY_AGAIN = 2;

const int TTY_NAME_MAX = 32;

/// A Task is a parallel search thread.
class Task extends ffi.Struct {
  /// < loop flag
  @ffi.Int32()
  external int loop;

  /// < run flag
  @ffi.Int32()
  external int run;

  /// < is helping
  @ffi.Int32()
  external int is_helping;

  /// < search data
  external ffi.Pointer<Search> search;

  /// < node splitted
  external ffi.Pointer<Node> node;

  /// < move to search
  external ffi.Pointer<Move> move;

  /// < thread
  @Thread()
  external int thread;

  /// < call counter
  @ffi.Uint64()
  external int n_calls;

  /// < nodes counter
  @ffi.Uint64()
  external int n_nodes;

  /// < lock
  external Lock lock;

  /// < condition
  external Condition cond;

  /// < link to its container
  external ffi.Pointer<TaskStack> container;
}

class TaskQueue extends ffi.Opaque {}

/// @struct TaskStack
///
/// A FILO of tasks
class TaskStack extends ffi.Struct {
  /// < mutex
  @SpinLock()
  external int spin;

  /// < set of tasks
  external ffi.Pointer<Task> task;

  /// < stack of tasks
  external ffi.Pointer<ffi.Pointer<Task>> stack;

  /// < maximal number of idle tasks
  @ffi.Int32()
  external int n;

  /// < number of idle tasks
  @ffi.Int32()
  external int n_idle;
}

/// Text (set of lines) representation
class Text extends ffi.Struct {
  /// < array of lines
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> line;

  /// < number of lines
  @ffi.Int32()
  external int n_lines;
}

/// Typedef mutex to a personalized type for portability
typedef Thread = pthread_t;

/// UI structure
class UI extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<Play> play;

  @ffi.Array.multi([1])
  external ffi.Array<Book> book;

  /// < GGS Client
  external ffi.Pointer<GGSClient> ggs;

  /// < true if play[0] == play[1]
  @ffi.Int32()
  external int is_same_play;

  /// < type of UI
  @ffi.Int32()
  external int type;

  /// < computer's color mode TODO: remove me
  @ffi.Int32()
  external int mode;

  @ffi.Array.multi([1])
  external ffi.Array<Event> event;

  /// < init function
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UI>)>> init;

  /// < main loop function
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UI>)>> loop;

  /// < free resources function
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<UI>)>> free;
}

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int UINT8_MAX = 255;

const int UINTMAX_MAX = -1;

const int UINTPTR_MAX = -1;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int UINT_FAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int UINT_LEAST8_MAX = 255;

const int UI_CASSIO = 1;

const int UI_EDAX = 2;

const int UI_GGS = 3;

const int UI_GTP = 4;

const int UI_LIBEDAX = 7;

const int UI_NBOARD = 5;

const int UI_NONE = 0;

const int UI_XBOARD = 6;

const int ULLONG_MAX = -1;

const int USE_ETC = 1;

const int USE_IID = 0;

const int USE_PREVIOUS_SEARCH = 1;

const int USE_PROBCUT = 1;

const int USE_PV_EXTENSION = 1;

const int USE_RECURSIVE_PROBCUT = 1;

const int USE_SC = 1;

const int USE_TC = 1;

const int USE_TYPE_PUNING = 1;

const int UTIME_NOW = 1073741823;

const int UTIME_OMIT = 1073741822;

/// options to control various heuristics
class UnnamedStruct1 extends ffi.Struct {
  /// < size (in number of bits) of the hash table
  @ffi.Int32()
  external int hash_table_size;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Int32> inc_sort_depth;

  /// < search in parallel, using n_tasks
  @ffi.Int32()
  external int n_task;

  /// < set one cpu/thread to diminish context change
  @ffi.Int32()
  external int cpu_affinity;

  /// < search display
  @ffi.Int32()
  external int verbosity;

  /// < search display min depth
  @ffi.Int32()
  external int noise;

  /// < line width
  @ffi.Int32()
  external int width;

  /// < repeat user input
  @ffi.Int32()
  external int echo;

  /// < info display
  @ffi.Int32()
  external int info;

  /// < display debug info in cassio's "fenetre de rapport"
  @ffi.Int32()
  external int debug_cassio;

  /// < adapt Cassio requests to search & solve faster
  @ffi.Int32()
  external int transgress_cassio;

  /// < level
  @ffi.Int32()
  external int level;

  /// < time in sec.
  @ffi.Int64()
  external int time;

  /// < game|move-time switch
  @ffi.Int32()
  external int play_type;

  /// < pondering on/off
  @ffi.Int32()
  external int can_ponder;

  /// < depth (only for testing)
  @ffi.Int32()
  external int depth;

  /// < selectivity (only for testing)
  @ffi.Int32()
  external int selectivity;

  /// < mode play (human/edax, etc.)
  @ffi.Int32()
  external int mode;

  /// < edax speed in N/S (for a more accurate time management)
  @ffi.Double()
  external double speed;

  /// < edax assumed speed (for nps based timing
  @ffi.Double()
  external double nps;

  /// < alpha bound
  @ffi.Int32()
  external int alpha;

  /// < beta bound
  @ffi.Int32()
  external int beta;

  /// < search for all best moves when solving problem
  @ffi.Int32()
  external int all_best;

  /// < evaluation file
  external ffi.Pointer<ffi.Int8> eval_file;

  /// < opening book filename
  external ffi.Pointer<ffi.Int8> book_file;

  /// < switch to use or not the opening book
  @ffi.Int32()
  external int book_allowed;

  /// < book randomness
  @ffi.Int32()
  external int book_randomness;

  /// < ggs host (ip or host name)
  external ffi.Pointer<ffi.Int8> ggs_host;

  /// < ggs login
  external ffi.Pointer<ffi.Int8> ggs_login;

  /// < ggs password
  external ffi.Pointer<ffi.Int8> ggs_password;

  /// < ggs port
  external ffi.Pointer<ffi.Int8> ggs_port;

  /// < ggs open number (set it false for tournaments)
  @ffi.Int32()
  external int ggs_open;

  @ffi.Double()
  external double probcut_d;

  /// < debug PV
  @ffi.Int32()
  external int pv_debug;

  /// < check PV correctness
  @ffi.Int32()
  external int pv_check;

  /// < guess PV missing moves
  @ffi.Int32()
  external int pv_guess;

  /// < game file
  external ffi.Pointer<ffi.Int8> game_file;

  /// < log file (for search)
  external ffi.Pointer<ffi.Int8> search_log_file;

  /// < log file (for user interface)
  external ffi.Pointer<ffi.Int8> ui_log_file;

  /// < log file (for ggs)
  external ffi.Pointer<ffi.Int8> ggs_log_file;

  /// < program name
  external ffi.Pointer<ffi.Int8> name;

  /// < start a new game after a game is over
  @ffi.Int32()
  external int auto_start;

  /// < store a game in a book after each game
  @ffi.Int32()
  external int auto_store;

  /// < change computer's side after each game
  @ffi.Int32()
  external int auto_swap;

  /// < quit when game is over
  @ffi.Int32()
  external int auto_quit;

  /// < repeat 'n' games (before quitting)
  @ffi.Int32()
  external int repeat;
}

class UnnamedStruct10 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> si_addr;

  @ffi.Int16()
  external int si_addr_lsb;

  external UnnamedUnion4 _bounds;
}

class UnnamedStruct11 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _lower;

  external ffi.Pointer<ffi.Void> _upper;
}

class UnnamedStruct12 extends ffi.Struct {
  @ffi.Int64()
  external int si_band;

  @ffi.Int32()
  external int si_fd;
}

class UnnamedStruct13 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _call_addr;

  @ffi.Int32()
  external int _syscall;

  @ffi.Uint32()
  external int _arch;
}

class UnnamedStruct14 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int32()
  external int ss_flags;

  @ffi.Int32()
  external int ss_size;
}

class UnnamedStruct15 extends ffi.Struct {
  @ffi.Int32()
  external int i;

  @ffi.Int32()
  external int x;
}

class UnnamedStruct16 extends ffi.Struct {
  /// <! Move coordinate
  @ffi.Int32()
  external int x;

  /// <! Move score
  @ffi.Int32()
  external int score;
}

class UnnamedStruct17 extends ffi.Struct {
  @ffi.Int16()
  external int year;

  @ffi.Int8()
  external int month;

  @ffi.Int8()
  external int day;

  @ffi.Int8()
  external int hour;

  @ffi.Int8()
  external int minute;

  @ffi.Int8()
  external int second;
}

class UnnamedStruct18 extends ffi.Struct {
  @ffi.Int16()
  external int year;

  @ffi.Int8()
  external int month;

  @ffi.Int8()
  external int day;

  @ffi.Int8()
  external int hour;

  @ffi.Int8()
  external int minute;

  @ffi.Int8()
  external int second;
}

class UnnamedStruct19 extends ffi.Struct {
  @ffi.Int32()
  external int level;

  @ffi.Int32()
  external int n_empties;

  @ffi.Int32()
  external int midgame_error;

  @ffi.Int32()
  external int endcut_error;

  @ffi.Int32()
  external int verbosity;
}

class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(__sigval_t)>> _function;

  external ffi.Pointer<pthread_attr_t> _attribute;
}

class UnnamedStruct20 extends ffi.Struct {
  @ffi.Int32()
  external int n_nodes;

  @ffi.Int32()
  external int n_links;

  @ffi.Int32()
  external int n_todo;
}

class UnnamedStruct21 extends ffi.Struct {
  @ffi.Int16()
  external int value;

  @ffi.Int16()
  external int lower;

  @ffi.Int16()
  external int upper;
}

class UnnamedStruct22 extends ffi.Struct {
  /// < time spent
  @ffi.Int64()
  external int spent;

  /// < time left
  @ffi.Int64()
  external int left;

  /// < extra time left
  @ffi.Int64()
  external int extra;
}

class UnnamedStruct23 extends ffi.Struct {
  @ffi.Array.multi([80])
  external ffi.Array<Board> real;

  @ffi.Array.multi([80])
  external ffi.Array<Board> unique;

  @ffi.Array.multi([80])
  external ffi.Array<Move> move;

  /// < number of forced move
  @ffi.Int32()
  external int n_move;

  /// < current forced move
  @ffi.Int32()
  external int i_move;
}

class UnnamedStruct24 extends ffi.Struct {
  /// < thread.
  @Thread()
  external int thread;

  /// < lock.
  external Lock lock;

  @ffi.Array.multi([1])
  external ffi.Array<Board> board;

  /// < launched thread
  @ffi.Int32()
  external int launched;

  /// < verbose pondering
  @ffi.Int32()
  external int verbose;
}

/// Search
class UnnamedStruct25 extends ffi.Struct {
  @ffi.Array.multi([1024])
  external ffi.Array<Board> board;

  /// Last position
  @ffi.Int32()
  external int n;
}

class UnnamedStruct26 extends ffi.Struct {
  /// < command
  external ffi.Pointer<ffi.Int8> cmd;

  /// < iteration number
  @ffi.Int32()
  external int i;

  /// < delay between commands
  @ffi.Int64()
  external int delay;
}

class UnnamedStruct27 extends ffi.Struct {
  /// < command
  external ffi.Pointer<ffi.Int8> cmd;

  /// < delay
  @ffi.Int64()
  external int delay;
}

class UnnamedStruct3 extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int64> __cancel_jmp_buf;

  @ffi.Int32()
  external int __mask_was_saved;
}

class UnnamedStruct4 extends ffi.Struct {
  /// < extra alloted time
  @ffi.Int64()
  external int extra;

  /// < time spent thinking
  @ffi.Int64()
  external int spent;

  /// < flag to extend time only once
  @ffi.Int32()
  external int extended;

  /// < flag allowing to extend time
  @ffi.Int32()
  external int can_update;

  /// < minimal alloted time
  @ffi.Int64()
  external int mini;

  /// < maximal alloted time
  @ffi.Int64()
  external int maxi;
}

class UnnamedStruct5 extends ffi.Struct {
  /// < depth
  @ffi.Int32()
  external int depth;

  /// < final selectivity
  @ffi.Int32()
  external int selectivity;

  /// < time in sec.
  @ffi.Int64()
  external int time;

  /// < time_per_move or per game ?
  @ffi.Int32()
  external int time_per_move;

  /// < verbosity level
  @ffi.Int32()
  external int verbosity;

  /// < keep date
  @ffi.Int32()
  external int keep_date;

  /// < header for search output
  external ffi.Pointer<ffi.Int8> header;

  /// < separator for search output
  external ffi.Pointer<ffi.Int8> separator;

  /// < guess PV (in cassio mode only)
  @ffi.Int32()
  external int guess_pv;

  /// < multi PV depth
  @ffi.Int32()
  external int multipv_depth;

  /// < hashtable size
  @ffi.Int32()
  external int hash_size;
}

class UnnamedStruct6 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;
}

class UnnamedStruct7 extends ffi.Struct {
  @ffi.Int32()
  external int si_tid;

  @ffi.Int32()
  external int si_overrun;

  external __sigval_t si_sigval;
}

class UnnamedStruct8 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  external __sigval_t si_sigval;
}

class UnnamedStruct9 extends ffi.Struct {
  @__pid_t()
  external int si_pid;

  @__uid_t()
  external int si_uid;

  @ffi.Int32()
  external int si_status;

  @__clock_t()
  external int si_utime;

  @__clock_t()
  external int si_stime;
}

class UnnamedUnion1 extends ffi.Union {
  @ffi.Uint32()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __wchb;
}

class UnnamedUnion2 extends ffi.Union {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.Int32> _pad;

  @__pid_t()
  external int _tid;

  external UnnamedStruct2 _sigev_thread;
}

class UnnamedUnion3 extends ffi.Union {
  @ffi.Array.multi([28])
  external ffi.Array<ffi.Int32> _pad;

  external UnnamedStruct6 _kill;

  external UnnamedStruct7 _timer;

  external UnnamedStruct8 _rt;

  external UnnamedStruct9 _sigchld;

  external UnnamedStruct10 _sigfault;

  external UnnamedStruct12 _sigpoll;

  external UnnamedStruct13 _sigsys;
}

class UnnamedUnion4 extends ffi.Union {
  external UnnamedStruct11 _addr_bnd;

  @__uint32_t()
  external int _pkey;
}

class UnnamedUnion5 extends ffi.Union {
  external __sighandler_t sa_handler;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<siginfo_t>, ffi.Pointer<ffi.Void>)>>
      sa_sigaction;
}

class UnnamedUnion6 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

const int VERSION = 4;

const String VERSION_STRING = '4.4';

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WCONTINUED = 8;

const int WEXITED = 4;

const int WHITE = 1;

const int WINT_MAX = 4294967295;

const int WINT_MIN = 0;

const int WNOHANG = 1;

const int WNOWAIT = 16777216;

const int WORD_SIZE = 256;

const int WSTOPPED = 2;

const int WUNTRACED = 2;

const int W_OK = 2;

class WthorBase extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<WthorHeader> header;

  /// Header
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> tournament;

  /// tournaments
  @ffi.Int32()
  external int n_tournaments;

  /// tournament number
  external ffi.Pointer<ffi.Pointer<ffi.Int8>> player;

  /// players
  @ffi.Int32()
  external int n_players;

  /// tournament players
  external ffi.Pointer<WthorGame> game;

  /// games
  @ffi.Int32()
  external int n_games;
}

class WthorGame extends ffi.Struct {
  @ffi.Int16()
  external int tournament;

  @ffi.Int16()
  external int black;

  @ffi.Int16()
  external int white;

  @ffi.Int8()
  external int score;

  @ffi.Int8()
  external int theoric_score;

  @ffi.Array.multi([60])
  external ffi.Array<ffi.Int8> x;
}

/// struct WthorHeader
/// @brief Header for wthor files
class WthorHeader extends ffi.Struct {
  /// < Century.
  @ffi.Int8()
  external int century;

  /// < Year.
  @ffi.Int8()
  external int year;

  /// < month
  @ffi.Int8()
  external int month;

  /// < day
  @ffi.Int8()
  external int day;

  /// < board size (8 or 10)
  @ffi.Int8()
  external int board_size;

  /// < game type (games or solitaires)
  @ffi.Int8()
  external int game_type;

  /// < depth (of theoric score)
  @ffi.Int8()
  external int depth;

  /// < reserved
  @ffi.Int8()
  external int reserved;

  /// <
  @ffi.Uint16()
  external int n;

  /// <
  @ffi.Uint16()
  external int game_year;

  /// <
  @ffi.Int32()
  external int n_games;
}

const int XADE = 1480672325;

const int XATTR_LIST_MAX = 65536;

const int XATTR_NAME_MAX = 255;

const int XATTR_SIZE_MAX = 65536;

class XBoardStats extends ffi.Struct {
  @ffi.Uint64()
  external int time;

  @ffi.Uint64()
  external int n_nodes;

  @ffi.Int32()
  external int n_games;
}

const int X_OK = 1;

const int _ALLOCA_H = 1;

const int _ASSERT_H = 1;

const int _ATFILE_SOURCE = 1;

const int _BITS_BYTESWAP_H = 1;

const int _BITS_CPU_SET_H = 1;

const int _BITS_ENDIANNESS_H = 1;

const int _BITS_ENDIAN_H = 1;

const int _BITS_ERRNO_H = 1;

const int _BITS_LIBM_SIMD_DECL_STUBS_H = 1;

const int _BITS_LOCALE_H = 1;

const int _BITS_POSIX1_LIM_H = 1;

const int _BITS_POSIX2_LIM_H = 1;

const int _BITS_POSIX_OPT_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _BITS_SCHED_H = 1;

const int _BITS_SETJMP_H = 1;

const int _BITS_SIGACTION_H = 1;

const int _BITS_SIGCONTEXT_H = 1;

const int _BITS_SIGEVENT_CONSTS_H = 1;

const int _BITS_SIGINFO_ARCH_H = 1;

const int _BITS_SIGINFO_CONSTS_H = 1;

const int _BITS_SIGNUM_GENERIC_H = 1;

const int _BITS_SIGNUM_H = 1;

const int _BITS_SIGSTACK_H = 1;

const int _BITS_SIGTHREAD_H = 1;

const int _BITS_SOCKADDR_H = 1;

const int _BITS_SS_FLAGS_H = 1;

const int _BITS_STAT_H = 1;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int _BITS_STDIO_LIM_H = 1;

const int _BITS_TIME64_H = 1;

const int _BITS_TIME_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int _BITS_UINTN_IDENTITY_H = 1;

const int _BITS_WCHAR_H = 1;

const int _CS_GNU_LIBC_VERSION = 2;

const int _CS_GNU_LIBC_VERSION1 = 2;

const int _CS_GNU_LIBPTHREAD_VERSION = 3;

const int _CS_GNU_LIBPTHREAD_VERSION1 = 3;

const int _CS_LFS64_CFLAGS = 1004;

const int _CS_LFS64_CFLAGS1 = 1004;

const int _CS_LFS64_LDFLAGS = 1005;

const int _CS_LFS64_LDFLAGS1 = 1005;

const int _CS_LFS64_LIBS = 1006;

const int _CS_LFS64_LIBS1 = 1006;

const int _CS_LFS64_LINTFLAGS = 1007;

const int _CS_LFS64_LINTFLAGS1 = 1007;

const int _CS_LFS_CFLAGS = 1000;

const int _CS_LFS_CFLAGS1 = 1000;

const int _CS_LFS_LDFLAGS = 1001;

const int _CS_LFS_LDFLAGS1 = 1001;

const int _CS_LFS_LIBS = 1002;

const int _CS_LFS_LIBS1 = 1002;

const int _CS_LFS_LINTFLAGS = 1003;

const int _CS_LFS_LINTFLAGS1 = 1003;

const int _CS_PATH = 0;

const int _CS_PATH1 = 0;

const int _CS_POSIX_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS1 = 1116;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS1 = 1117;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS1 = 1118;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS = 1119;

const int _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS1 = 1119;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS1 = 1120;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS1 = 1121;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS1 = 1122;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS = 1123;

const int _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS1 = 1123;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 1124;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS1 = 1124;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS1 = 1125;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LIBS1 = 1126;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS = 1127;

const int _CS_POSIX_V6_LP64_OFF64_LINTFLAGS1 = 1127;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS1 = 1128;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS1 = 1129;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS1 = 1130;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS = 1131;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS1 = 1131;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_CFLAGS1 = 1132;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LDFLAGS1 = 1133;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LIBS1 = 1134;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS = 1135;

const int _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS1 = 1135;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS1 = 1136;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS1 = 1137;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LIBS1 = 1138;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS = 1139;

const int _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS1 = 1139;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS = 1140;

const int _CS_POSIX_V7_LP64_OFF64_CFLAGS1 = 1140;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LDFLAGS1 = 1141;

const int _CS_POSIX_V7_LP64_OFF64_LIBS = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LIBS1 = 1142;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS = 1143;

const int _CS_POSIX_V7_LP64_OFF64_LINTFLAGS1 = 1143;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS1 = 1144;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS1 = 1145;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LIBS1 = 1146;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS = 1147;

const int _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS1 = 1147;

const int _CS_POSIX_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_V5_WIDTH_RESTRICTED_ENVS = 4;

const int _CS_V5_WIDTH_RESTRICTED_ENVS1 = 4;

const int _CS_V6_ENV = 1148;

const int _CS_V6_ENV1 = 1148;

const int _CS_V6_WIDTH_RESTRICTED_ENVS = 1;

const int _CS_V6_WIDTH_RESTRICTED_ENVS1 = 1;

const int _CS_V7_ENV = 1149;

const int _CS_V7_ENV1 = 1149;

const int _CS_V7_WIDTH_RESTRICTED_ENVS = 5;

const int _CS_V7_WIDTH_RESTRICTED_ENVS1 = 5;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 1100;

const int _CS_XBS5_ILP32_OFF32_CFLAGS1 = 1100;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 1101;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS1 = 1101;

const int _CS_XBS5_ILP32_OFF32_LIBS = 1102;

const int _CS_XBS5_ILP32_OFF32_LIBS1 = 1102;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 1103;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS1 = 1103;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 1104;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS1 = 1104;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS1 = 1105;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LIBS1 = 1106;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 1107;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS1 = 1107;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 1108;

const int _CS_XBS5_LP64_OFF64_CFLAGS1 = 1108;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 1109;

const int _CS_XBS5_LP64_OFF64_LDFLAGS1 = 1109;

const int _CS_XBS5_LP64_OFF64_LIBS = 1110;

const int _CS_XBS5_LP64_OFF64_LIBS1 = 1110;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 1111;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS1 = 1111;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS1 = 1112;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS1 = 1113;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS1 = 1114;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 1115;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS1 = 1115;

const int _CTYPE_H = 1;

const int _DEFAULT_SOURCE = 1;

const int _ENDIAN_H = 1;

const int _ERRNO_H = 1;

const int _FEATURES_H = 1;

const int _GETOPT_CORE_H = 1;

const int _GETOPT_POSIX_H = 1;

class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

class _IO_FILE extends ffi.Struct {
  @ffi.Int32()
  external int _flags;

  external ffi.Pointer<ffi.Int8> _IO_read_ptr;

  external ffi.Pointer<ffi.Int8> _IO_read_end;

  external ffi.Pointer<ffi.Int8> _IO_read_base;

  external ffi.Pointer<ffi.Int8> _IO_write_base;

  external ffi.Pointer<ffi.Int8> _IO_write_ptr;

  external ffi.Pointer<ffi.Int8> _IO_write_end;

  external ffi.Pointer<ffi.Int8> _IO_buf_base;

  external ffi.Pointer<ffi.Int8> _IO_buf_end;

  external ffi.Pointer<ffi.Int8> _IO_save_base;

  external ffi.Pointer<ffi.Int8> _IO_backup_base;

  external ffi.Pointer<ffi.Int8> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int32()
  external int _fileno;

  @ffi.Int32()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.Uint16()
  external int _cur_column;

  @ffi.Int8()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Int8> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Int32()
  external int __pad5;

  @ffi.Int32()
  external int _mode;

  @ffi.Int8()
  external int _unused2;
}

const int _IO_USER_LOCK = 32768;

class _IO_codecvt extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;

class _IO_marker extends ffi.Opaque {}

class _IO_wide_data extends ffi.Opaque {}

const int _ISalnum = 8;

const int _ISalpha = 1024;

const int _ISblank = 1;

const int _IScntrl = 2;

const int _ISdigit = 2048;

const int _ISgraph = 32768;

const int _ISlower = 512;

const int _ISprint = 16384;

const int _ISpunct = 4;

const int _ISspace = 8192;

const int _ISupper = 256;

const int _ISxdigit = 4096;

const int _LFS64_ASYNCHRONOUS_IO = 1;

const int _LFS64_LARGEFILE = 1;

const int _LFS64_STDIO = 1;

const int _LFS_ASYNCHRONOUS_IO = 1;

const int _LFS_LARGEFILE = 1;

const int _LIBC_LIMITS_H_ = 1;

const int _LOCALE_H = 1;

const int _MATH_H = 1;

const int _MKNOD_VER = 0;

const int _MKNOD_VER_LINUX = 0;

const int _NETDB_H = 1;

const int _NETINET_IN_H = 1;

const int _NETINET_TCP_H = 1;

const int _NSIG = 65;

const String _PATH_HEQUIV = '/etc/hosts.equiv';

const String _PATH_HOSTS = '/etc/hosts';

const String _PATH_NETWORKS = '/etc/networks';

const String _PATH_NSSWITCH_CONF = '/etc/nsswitch.conf';

const String _PATH_PROTOCOLS = '/etc/protocols';

const String _PATH_SERVICES = '/etc/services';

const int _PC_2_SYMLINKS = 20;

const int _PC_2_SYMLINKS1 = 20;

const int _PC_ALLOC_SIZE_MIN = 18;

const int _PC_ALLOC_SIZE_MIN1 = 18;

const int _PC_ASYNC_IO = 10;

const int _PC_ASYNC_IO1 = 10;

const int _PC_CHOWN_RESTRICTED = 6;

const int _PC_CHOWN_RESTRICTED1 = 6;

const int _PC_FILESIZEBITS = 13;

const int _PC_FILESIZEBITS1 = 13;

const int _PC_LINK_MAX = 0;

const int _PC_LINK_MAX1 = 0;

const int _PC_MAX_CANON = 1;

const int _PC_MAX_CANON1 = 1;

const int _PC_MAX_INPUT = 2;

const int _PC_MAX_INPUT1 = 2;

const int _PC_NAME_MAX = 3;

const int _PC_NAME_MAX1 = 3;

const int _PC_NO_TRUNC = 7;

const int _PC_NO_TRUNC1 = 7;

const int _PC_PATH_MAX = 4;

const int _PC_PATH_MAX1 = 4;

const int _PC_PIPE_BUF = 5;

const int _PC_PIPE_BUF1 = 5;

const int _PC_PRIO_IO = 11;

const int _PC_PRIO_IO1 = 11;

const int _PC_REC_INCR_XFER_SIZE = 14;

const int _PC_REC_INCR_XFER_SIZE1 = 14;

const int _PC_REC_MAX_XFER_SIZE = 15;

const int _PC_REC_MAX_XFER_SIZE1 = 15;

const int _PC_REC_MIN_XFER_SIZE = 16;

const int _PC_REC_MIN_XFER_SIZE1 = 16;

const int _PC_REC_XFER_ALIGN = 17;

const int _PC_REC_XFER_ALIGN1 = 17;

const int _PC_SOCK_MAXBUF = 12;

const int _PC_SOCK_MAXBUF1 = 12;

const int _PC_SYMLINK_MAX = 19;

const int _PC_SYMLINK_MAX1 = 19;

const int _PC_SYNC_IO = 9;

const int _PC_SYNC_IO1 = 9;

const int _PC_VDISABLE = 8;

const int _PC_VDISABLE1 = 8;

const int _POSIX2_BC_BASE_MAX = 99;

const int _POSIX2_BC_DIM_MAX = 2048;

const int _POSIX2_BC_SCALE_MAX = 99;

const int _POSIX2_BC_STRING_MAX = 1000;

const int _POSIX2_CHARCLASS_NAME_MAX = 14;

const int _POSIX2_CHAR_TERM = 200809;

const int _POSIX2_COLL_WEIGHTS_MAX = 2;

const int _POSIX2_C_BIND = 200809;

const int _POSIX2_C_DEV = 200809;

const int _POSIX2_C_VERSION = 200809;

const int _POSIX2_EXPR_NEST_MAX = 32;

const int _POSIX2_LINE_MAX = 2048;

const int _POSIX2_LOCALEDEF = 200809;

const int _POSIX2_RE_DUP_MAX = 255;

const int _POSIX2_SW_DEV = 200809;

const int _POSIX2_VERSION = 200809;

const int _POSIX_ADVISORY_INFO = 200809;

const int _POSIX_AIO_LISTIO_MAX = 2;

const int _POSIX_AIO_MAX = 1;

const int _POSIX_ARG_MAX = 4096;

const int _POSIX_ASYNCHRONOUS_IO = 200809;

const int _POSIX_ASYNC_IO = 1;

const int _POSIX_BARRIERS = 200809;

const int _POSIX_CHILD_MAX = 25;

const int _POSIX_CHOWN_RESTRICTED = 0;

const int _POSIX_CLOCKRES_MIN = 20000000;

const int _POSIX_CLOCK_SELECTION = 200809;

const int _POSIX_CPUTIME = 0;

const int _POSIX_C_SOURCE = 200809;

const int _POSIX_DELAYTIMER_MAX = 32;

const int _POSIX_FSYNC = 200809;

const int _POSIX_HOST_NAME_MAX = 255;

const int _POSIX_IPV6 = 200809;

const int _POSIX_JOB_CONTROL = 1;

const int _POSIX_LINK_MAX = 8;

const int _POSIX_LOGIN_NAME_MAX = 9;

const int _POSIX_MAPPED_FILES = 200809;

const int _POSIX_MAX_CANON = 255;

const int _POSIX_MAX_INPUT = 255;

const int _POSIX_MEMLOCK = 200809;

const int _POSIX_MEMLOCK_RANGE = 200809;

const int _POSIX_MEMORY_PROTECTION = 200809;

const int _POSIX_MESSAGE_PASSING = 200809;

const int _POSIX_MONOTONIC_CLOCK = 0;

const int _POSIX_MQ_OPEN_MAX = 8;

const int _POSIX_MQ_PRIO_MAX = 32;

const int _POSIX_NAME_MAX = 14;

const int _POSIX_NGROUPS_MAX = 8;

const int _POSIX_NO_TRUNC = 1;

const int _POSIX_OPEN_MAX = 20;

const int _POSIX_PATH_MAX = 256;

const int _POSIX_PIPE_BUF = 512;

const int _POSIX_PRIORITIZED_IO = 200809;

const int _POSIX_PRIORITY_SCHEDULING = 200809;

const int _POSIX_RAW_SOCKETS = 200809;

const int _POSIX_READER_WRITER_LOCKS = 200809;

const int _POSIX_REALTIME_SIGNALS = 200809;

const int _POSIX_REENTRANT_FUNCTIONS = 1;

const int _POSIX_REGEXP = 1;

const int _POSIX_RE_DUP_MAX = 255;

const int _POSIX_RTSIG_MAX = 8;

const int _POSIX_SAVED_IDS = 1;

const int _POSIX_SEMAPHORES = 200809;

const int _POSIX_SEM_NSEMS_MAX = 256;

const int _POSIX_SEM_VALUE_MAX = 32767;

const int _POSIX_SHARED_MEMORY_OBJECTS = 200809;

const int _POSIX_SHELL = 1;

const int _POSIX_SIGQUEUE_MAX = 32;

const int _POSIX_SOURCE = 1;

const int _POSIX_SPAWN = 200809;

const int _POSIX_SPIN_LOCKS = 200809;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SSIZE_MAX = 32767;

const int _POSIX_STREAM_MAX = 8;

const int _POSIX_SYMLINK_MAX = 255;

const int _POSIX_SYMLOOP_MAX = 8;

const int _POSIX_SYNCHRONIZED_IO = 200809;

const int _POSIX_THREADS = 200809;

const int _POSIX_THREAD_ATTR_STACKADDR = 200809;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200809;

const int _POSIX_THREAD_CPUTIME = 0;

const int _POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = 200809;

const int _POSIX_THREAD_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_PRIO_PROTECT = 200809;

const int _POSIX_THREAD_PROCESS_SHARED = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_INHERIT = 200809;

const int _POSIX_THREAD_ROBUST_PRIO_PROTECT = -1;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200809;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREAD_THREADS_MAX = 64;

const int _POSIX_TIMEOUTS = 200809;

const int _POSIX_TIMERS = 200809;

const int _POSIX_TIMER_MAX = 32;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TTY_NAME_MAX = 9;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX_TZNAME_MAX = 6;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = -1;

const int _POSIX_VDISABLE = 0;

const int _POSIX_VERSION = 200809;

const int _PTHREAD_H = 1;

const int _RPC_NETDB_H = 1;

const int _SCHED_H = 1;

const int _SC_2_CHAR_TERM = 95;

const int _SC_2_CHAR_TERM1 = 95;

const int _SC_2_C_BIND = 47;

const int _SC_2_C_BIND1 = 47;

const int _SC_2_C_DEV = 48;

const int _SC_2_C_DEV1 = 48;

const int _SC_2_C_VERSION = 96;

const int _SC_2_C_VERSION1 = 96;

const int _SC_2_FORT_DEV = 49;

const int _SC_2_FORT_DEV1 = 49;

const int _SC_2_FORT_RUN = 50;

const int _SC_2_FORT_RUN1 = 50;

const int _SC_2_LOCALEDEF = 52;

const int _SC_2_LOCALEDEF1 = 52;

const int _SC_2_PBS = 168;

const int _SC_2_PBS1 = 168;

const int _SC_2_PBS_ACCOUNTING = 169;

const int _SC_2_PBS_ACCOUNTING1 = 169;

const int _SC_2_PBS_CHECKPOINT = 175;

const int _SC_2_PBS_CHECKPOINT1 = 175;

const int _SC_2_PBS_LOCATE = 170;

const int _SC_2_PBS_LOCATE1 = 170;

const int _SC_2_PBS_MESSAGE = 171;

const int _SC_2_PBS_MESSAGE1 = 171;

const int _SC_2_PBS_TRACK = 172;

const int _SC_2_PBS_TRACK1 = 172;

const int _SC_2_SW_DEV = 51;

const int _SC_2_SW_DEV1 = 51;

const int _SC_2_UPE = 97;

const int _SC_2_UPE1 = 97;

const int _SC_2_VERSION = 46;

const int _SC_2_VERSION1 = 46;

const int _SC_ADVISORY_INFO = 132;

const int _SC_ADVISORY_INFO1 = 132;

const int _SC_AIO_LISTIO_MAX = 23;

const int _SC_AIO_LISTIO_MAX1 = 23;

const int _SC_AIO_MAX = 24;

const int _SC_AIO_MAX1 = 24;

const int _SC_AIO_PRIO_DELTA_MAX = 25;

const int _SC_AIO_PRIO_DELTA_MAX1 = 25;

const int _SC_ARG_MAX = 0;

const int _SC_ARG_MAX1 = 0;

const int _SC_ASYNCHRONOUS_IO = 12;

const int _SC_ASYNCHRONOUS_IO1 = 12;

const int _SC_ATEXIT_MAX = 87;

const int _SC_ATEXIT_MAX1 = 87;

const int _SC_AVPHYS_PAGES = 86;

const int _SC_AVPHYS_PAGES1 = 86;

const int _SC_BARRIERS = 133;

const int _SC_BARRIERS1 = 133;

const int _SC_BASE = 134;

const int _SC_BASE1 = 134;

const int _SC_BC_BASE_MAX = 36;

const int _SC_BC_BASE_MAX1 = 36;

const int _SC_BC_DIM_MAX = 37;

const int _SC_BC_DIM_MAX1 = 37;

const int _SC_BC_SCALE_MAX = 38;

const int _SC_BC_SCALE_MAX1 = 38;

const int _SC_BC_STRING_MAX = 39;

const int _SC_BC_STRING_MAX1 = 39;

const int _SC_CHARCLASS_NAME_MAX = 45;

const int _SC_CHARCLASS_NAME_MAX1 = 45;

const int _SC_CHAR_BIT = 101;

const int _SC_CHAR_BIT1 = 101;

const int _SC_CHAR_MAX = 102;

const int _SC_CHAR_MAX1 = 102;

const int _SC_CHAR_MIN = 103;

const int _SC_CHAR_MIN1 = 103;

const int _SC_CHILD_MAX = 1;

const int _SC_CHILD_MAX1 = 1;

const int _SC_CLK_TCK = 2;

const int _SC_CLK_TCK1 = 2;

const int _SC_CLOCK_SELECTION = 137;

const int _SC_CLOCK_SELECTION1 = 137;

const int _SC_COLL_WEIGHTS_MAX = 40;

const int _SC_COLL_WEIGHTS_MAX1 = 40;

const int _SC_CPUTIME = 138;

const int _SC_CPUTIME1 = 138;

const int _SC_C_LANG_SUPPORT = 135;

const int _SC_C_LANG_SUPPORT1 = 135;

const int _SC_C_LANG_SUPPORT_R = 136;

const int _SC_C_LANG_SUPPORT_R1 = 136;

const int _SC_DELAYTIMER_MAX = 26;

const int _SC_DELAYTIMER_MAX1 = 26;

const int _SC_DEVICE_IO = 140;

const int _SC_DEVICE_IO1 = 140;

const int _SC_DEVICE_SPECIFIC = 141;

const int _SC_DEVICE_SPECIFIC1 = 141;

const int _SC_DEVICE_SPECIFIC_R = 142;

const int _SC_DEVICE_SPECIFIC_R1 = 142;

const int _SC_EQUIV_CLASS_MAX = 41;

const int _SC_EQUIV_CLASS_MAX1 = 41;

const int _SC_EXPR_NEST_MAX = 42;

const int _SC_EXPR_NEST_MAX1 = 42;

const int _SC_FD_MGMT = 143;

const int _SC_FD_MGMT1 = 143;

const int _SC_FIFO = 144;

const int _SC_FIFO1 = 144;

const int _SC_FILE_ATTRIBUTES = 146;

const int _SC_FILE_ATTRIBUTES1 = 146;

const int _SC_FILE_LOCKING = 147;

const int _SC_FILE_LOCKING1 = 147;

const int _SC_FILE_SYSTEM = 148;

const int _SC_FILE_SYSTEM1 = 148;

const int _SC_FSYNC = 15;

const int _SC_FSYNC1 = 15;

const int _SC_GETGR_R_SIZE_MAX = 69;

const int _SC_GETGR_R_SIZE_MAX1 = 69;

const int _SC_GETPW_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX1 = 70;

const int _SC_HOST_NAME_MAX = 180;

const int _SC_HOST_NAME_MAX1 = 180;

const int _SC_INT_MAX = 104;

const int _SC_INT_MAX1 = 104;

const int _SC_INT_MIN = 105;

const int _SC_INT_MIN1 = 105;

const int _SC_IOV_MAX = 60;

const int _SC_IOV_MAX1 = 60;

const int _SC_IPV6 = 235;

const int _SC_IPV61 = 235;

const int _SC_JOB_CONTROL = 7;

const int _SC_JOB_CONTROL1 = 7;

const int _SC_LEVEL1_DCACHE_ASSOC = 189;

const int _SC_LEVEL1_DCACHE_ASSOC1 = 189;

const int _SC_LEVEL1_DCACHE_LINESIZE = 190;

const int _SC_LEVEL1_DCACHE_LINESIZE1 = 190;

const int _SC_LEVEL1_DCACHE_SIZE = 188;

const int _SC_LEVEL1_DCACHE_SIZE1 = 188;

const int _SC_LEVEL1_ICACHE_ASSOC = 186;

const int _SC_LEVEL1_ICACHE_ASSOC1 = 186;

const int _SC_LEVEL1_ICACHE_LINESIZE = 187;

const int _SC_LEVEL1_ICACHE_LINESIZE1 = 187;

const int _SC_LEVEL1_ICACHE_SIZE = 185;

const int _SC_LEVEL1_ICACHE_SIZE1 = 185;

const int _SC_LEVEL2_CACHE_ASSOC = 192;

const int _SC_LEVEL2_CACHE_ASSOC1 = 192;

const int _SC_LEVEL2_CACHE_LINESIZE = 193;

const int _SC_LEVEL2_CACHE_LINESIZE1 = 193;

const int _SC_LEVEL2_CACHE_SIZE = 191;

const int _SC_LEVEL2_CACHE_SIZE1 = 191;

const int _SC_LEVEL3_CACHE_ASSOC = 195;

const int _SC_LEVEL3_CACHE_ASSOC1 = 195;

const int _SC_LEVEL3_CACHE_LINESIZE = 196;

const int _SC_LEVEL3_CACHE_LINESIZE1 = 196;

const int _SC_LEVEL3_CACHE_SIZE = 194;

const int _SC_LEVEL3_CACHE_SIZE1 = 194;

const int _SC_LEVEL4_CACHE_ASSOC = 198;

const int _SC_LEVEL4_CACHE_ASSOC1 = 198;

const int _SC_LEVEL4_CACHE_LINESIZE = 199;

const int _SC_LEVEL4_CACHE_LINESIZE1 = 199;

const int _SC_LEVEL4_CACHE_SIZE = 197;

const int _SC_LEVEL4_CACHE_SIZE1 = 197;

const int _SC_LINE_MAX = 43;

const int _SC_LINE_MAX1 = 43;

const int _SC_LOGIN_NAME_MAX = 71;

const int _SC_LOGIN_NAME_MAX1 = 71;

const int _SC_LONG_BIT = 106;

const int _SC_LONG_BIT1 = 106;

const int _SC_MAPPED_FILES = 16;

const int _SC_MAPPED_FILES1 = 16;

const int _SC_MB_LEN_MAX = 108;

const int _SC_MB_LEN_MAX1 = 108;

const int _SC_MEMLOCK = 17;

const int _SC_MEMLOCK1 = 17;

const int _SC_MEMLOCK_RANGE = 18;

const int _SC_MEMLOCK_RANGE1 = 18;

const int _SC_MEMORY_PROTECTION = 19;

const int _SC_MEMORY_PROTECTION1 = 19;

const int _SC_MESSAGE_PASSING = 20;

const int _SC_MESSAGE_PASSING1 = 20;

const int _SC_MONOTONIC_CLOCK = 149;

const int _SC_MONOTONIC_CLOCK1 = 149;

const int _SC_MQ_OPEN_MAX = 27;

const int _SC_MQ_OPEN_MAX1 = 27;

const int _SC_MQ_PRIO_MAX = 28;

const int _SC_MQ_PRIO_MAX1 = 28;

const int _SC_MULTI_PROCESS = 150;

const int _SC_MULTI_PROCESS1 = 150;

const int _SC_NETWORKING = 152;

const int _SC_NETWORKING1 = 152;

const int _SC_NGROUPS_MAX = 3;

const int _SC_NGROUPS_MAX1 = 3;

const int _SC_NL_ARGMAX = 119;

const int _SC_NL_ARGMAX1 = 119;

const int _SC_NL_LANGMAX = 120;

const int _SC_NL_LANGMAX1 = 120;

const int _SC_NL_MSGMAX = 121;

const int _SC_NL_MSGMAX1 = 121;

const int _SC_NL_NMAX = 122;

const int _SC_NL_NMAX1 = 122;

const int _SC_NL_SETMAX = 123;

const int _SC_NL_SETMAX1 = 123;

const int _SC_NL_TEXTMAX = 124;

const int _SC_NL_TEXTMAX1 = 124;

const int _SC_NPROCESSORS_CONF = 83;

const int _SC_NPROCESSORS_CONF1 = 83;

const int _SC_NPROCESSORS_ONLN = 84;

const int _SC_NPROCESSORS_ONLN1 = 84;

const int _SC_NZERO = 109;

const int _SC_NZERO1 = 109;

const int _SC_OPEN_MAX = 4;

const int _SC_OPEN_MAX1 = 4;

const int _SC_PAGESIZE = 30;

const int _SC_PAGESIZE1 = 30;

const int _SC_PAGE_SIZE = 30;

const int _SC_PASS_MAX = 88;

const int _SC_PASS_MAX1 = 88;

const int _SC_PHYS_PAGES = 85;

const int _SC_PHYS_PAGES1 = 85;

const int _SC_PII = 53;

const int _SC_PII1 = 53;

const int _SC_PII_INTERNET = 56;

const int _SC_PII_INTERNET1 = 56;

const int _SC_PII_INTERNET_DGRAM = 62;

const int _SC_PII_INTERNET_DGRAM1 = 62;

const int _SC_PII_INTERNET_STREAM = 61;

const int _SC_PII_INTERNET_STREAM1 = 61;

const int _SC_PII_OSI = 57;

const int _SC_PII_OSI1 = 57;

const int _SC_PII_OSI_CLTS = 64;

const int _SC_PII_OSI_CLTS1 = 64;

const int _SC_PII_OSI_COTS = 63;

const int _SC_PII_OSI_COTS1 = 63;

const int _SC_PII_OSI_M = 65;

const int _SC_PII_OSI_M1 = 65;

const int _SC_PII_SOCKET = 55;

const int _SC_PII_SOCKET1 = 55;

const int _SC_PII_XTI = 54;

const int _SC_PII_XTI1 = 54;

const int _SC_PIPE = 145;

const int _SC_PIPE1 = 145;

const int _SC_POLL = 58;

const int _SC_POLL1 = 58;

const int _SC_PRIORITIZED_IO = 13;

const int _SC_PRIORITIZED_IO1 = 13;

const int _SC_PRIORITY_SCHEDULING = 10;

const int _SC_PRIORITY_SCHEDULING1 = 10;

const int _SC_RAW_SOCKETS = 236;

const int _SC_RAW_SOCKETS1 = 236;

const int _SC_READER_WRITER_LOCKS = 153;

const int _SC_READER_WRITER_LOCKS1 = 153;

const int _SC_REALTIME_SIGNALS = 9;

const int _SC_REALTIME_SIGNALS1 = 9;

const int _SC_REGEXP = 155;

const int _SC_REGEXP1 = 155;

const int _SC_REGEX_VERSION = 156;

const int _SC_REGEX_VERSION1 = 156;

const int _SC_RE_DUP_MAX = 44;

const int _SC_RE_DUP_MAX1 = 44;

const int _SC_RTSIG_MAX = 31;

const int _SC_RTSIG_MAX1 = 31;

const int _SC_SAVED_IDS = 8;

const int _SC_SAVED_IDS1 = 8;

const int _SC_SCHAR_MAX = 111;

const int _SC_SCHAR_MAX1 = 111;

const int _SC_SCHAR_MIN = 112;

const int _SC_SCHAR_MIN1 = 112;

const int _SC_SELECT = 59;

const int _SC_SELECT1 = 59;

const int _SC_SEMAPHORES = 21;

const int _SC_SEMAPHORES1 = 21;

const int _SC_SEM_NSEMS_MAX = 32;

const int _SC_SEM_NSEMS_MAX1 = 32;

const int _SC_SEM_VALUE_MAX = 33;

const int _SC_SEM_VALUE_MAX1 = 33;

const int _SC_SHARED_MEMORY_OBJECTS = 22;

const int _SC_SHARED_MEMORY_OBJECTS1 = 22;

const int _SC_SHELL = 157;

const int _SC_SHELL1 = 157;

const int _SC_SHRT_MAX = 113;

const int _SC_SHRT_MAX1 = 113;

const int _SC_SHRT_MIN = 114;

const int _SC_SHRT_MIN1 = 114;

const int _SC_SIGNALS = 158;

const int _SC_SIGNALS1 = 158;

const int _SC_SIGQUEUE_MAX = 34;

const int _SC_SIGQUEUE_MAX1 = 34;

const int _SC_SINGLE_PROCESS = 151;

const int _SC_SINGLE_PROCESS1 = 151;

const int _SC_SPAWN = 159;

const int _SC_SPAWN1 = 159;

const int _SC_SPIN_LOCKS = 154;

const int _SC_SPIN_LOCKS1 = 154;

const int _SC_SPORADIC_SERVER = 160;

const int _SC_SPORADIC_SERVER1 = 160;

const int _SC_SSIZE_MAX = 110;

const int _SC_SSIZE_MAX1 = 110;

const int _SC_SS_REPL_MAX = 241;

const int _SC_SS_REPL_MAX1 = 241;

const int _SC_STREAMS = 174;

const int _SC_STREAMS1 = 174;

const int _SC_STREAM_MAX = 5;

const int _SC_STREAM_MAX1 = 5;

const int _SC_SYMLOOP_MAX = 173;

const int _SC_SYMLOOP_MAX1 = 173;

const int _SC_SYNCHRONIZED_IO = 14;

const int _SC_SYNCHRONIZED_IO1 = 14;

const int _SC_SYSTEM_DATABASE = 162;

const int _SC_SYSTEM_DATABASE1 = 162;

const int _SC_SYSTEM_DATABASE_R = 163;

const int _SC_SYSTEM_DATABASE_R1 = 163;

const int _SC_THREADS = 67;

const int _SC_THREADS1 = 67;

const int _SC_THREAD_ATTR_STACKADDR = 77;

const int _SC_THREAD_ATTR_STACKADDR1 = 77;

const int _SC_THREAD_ATTR_STACKSIZE = 78;

const int _SC_THREAD_ATTR_STACKSIZE1 = 78;

const int _SC_THREAD_CPUTIME = 139;

const int _SC_THREAD_CPUTIME1 = 139;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 73;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS1 = 73;

const int _SC_THREAD_KEYS_MAX = 74;

const int _SC_THREAD_KEYS_MAX1 = 74;

const int _SC_THREAD_PRIORITY_SCHEDULING = 79;

const int _SC_THREAD_PRIORITY_SCHEDULING1 = 79;

const int _SC_THREAD_PRIO_INHERIT = 80;

const int _SC_THREAD_PRIO_INHERIT1 = 80;

const int _SC_THREAD_PRIO_PROTECT = 81;

const int _SC_THREAD_PRIO_PROTECT1 = 81;

const int _SC_THREAD_PROCESS_SHARED = 82;

const int _SC_THREAD_PROCESS_SHARED1 = 82;

const int _SC_THREAD_ROBUST_PRIO_INHERIT = 247;

const int _SC_THREAD_ROBUST_PRIO_INHERIT1 = 247;

const int _SC_THREAD_ROBUST_PRIO_PROTECT = 248;

const int _SC_THREAD_ROBUST_PRIO_PROTECT1 = 248;

const int _SC_THREAD_SAFE_FUNCTIONS = 68;

const int _SC_THREAD_SAFE_FUNCTIONS1 = 68;

const int _SC_THREAD_SPORADIC_SERVER = 161;

const int _SC_THREAD_SPORADIC_SERVER1 = 161;

const int _SC_THREAD_STACK_MIN = 75;

const int _SC_THREAD_STACK_MIN1 = 75;

const int _SC_THREAD_THREADS_MAX = 76;

const int _SC_THREAD_THREADS_MAX1 = 76;

const int _SC_TIMEOUTS = 164;

const int _SC_TIMEOUTS1 = 164;

const int _SC_TIMERS = 11;

const int _SC_TIMERS1 = 11;

const int _SC_TIMER_MAX = 35;

const int _SC_TIMER_MAX1 = 35;

const int _SC_TRACE = 181;

const int _SC_TRACE1 = 181;

const int _SC_TRACE_EVENT_FILTER = 182;

const int _SC_TRACE_EVENT_FILTER1 = 182;

const int _SC_TRACE_EVENT_NAME_MAX = 242;

const int _SC_TRACE_EVENT_NAME_MAX1 = 242;

const int _SC_TRACE_INHERIT = 183;

const int _SC_TRACE_INHERIT1 = 183;

const int _SC_TRACE_LOG = 184;

const int _SC_TRACE_LOG1 = 184;

const int _SC_TRACE_NAME_MAX = 243;

const int _SC_TRACE_NAME_MAX1 = 243;

const int _SC_TRACE_SYS_MAX = 244;

const int _SC_TRACE_SYS_MAX1 = 244;

const int _SC_TRACE_USER_EVENT_MAX = 245;

const int _SC_TRACE_USER_EVENT_MAX1 = 245;

const int _SC_TTY_NAME_MAX = 72;

const int _SC_TTY_NAME_MAX1 = 72;

const int _SC_TYPED_MEMORY_OBJECTS = 165;

const int _SC_TYPED_MEMORY_OBJECTS1 = 165;

const int _SC_TZNAME_MAX = 6;

const int _SC_TZNAME_MAX1 = 6;

const int _SC_T_IOV_MAX = 66;

const int _SC_T_IOV_MAX1 = 66;

const int _SC_UCHAR_MAX = 115;

const int _SC_UCHAR_MAX1 = 115;

const int _SC_UINT_MAX = 116;

const int _SC_UINT_MAX1 = 116;

const int _SC_UIO_MAXIOV = 60;

const int _SC_UIO_MAXIOV1 = 60;

const int _SC_ULONG_MAX = 117;

const int _SC_ULONG_MAX1 = 117;

const int _SC_USER_GROUPS = 166;

const int _SC_USER_GROUPS1 = 166;

const int _SC_USER_GROUPS_R = 167;

const int _SC_USER_GROUPS_R1 = 167;

const int _SC_USHRT_MAX = 118;

const int _SC_USHRT_MAX1 = 118;

const int _SC_V6_ILP32_OFF32 = 176;

const int _SC_V6_ILP32_OFF321 = 176;

const int _SC_V6_ILP32_OFFBIG = 177;

const int _SC_V6_ILP32_OFFBIG1 = 177;

const int _SC_V6_LP64_OFF64 = 178;

const int _SC_V6_LP64_OFF641 = 178;

const int _SC_V6_LPBIG_OFFBIG = 179;

const int _SC_V6_LPBIG_OFFBIG1 = 179;

const int _SC_V7_ILP32_OFF32 = 237;

const int _SC_V7_ILP32_OFF321 = 237;

const int _SC_V7_ILP32_OFFBIG = 238;

const int _SC_V7_ILP32_OFFBIG1 = 238;

const int _SC_V7_LP64_OFF64 = 239;

const int _SC_V7_LP64_OFF641 = 239;

const int _SC_V7_LPBIG_OFFBIG = 240;

const int _SC_V7_LPBIG_OFFBIG1 = 240;

const int _SC_VERSION = 29;

const int _SC_VERSION1 = 29;

const int _SC_WORD_BIT = 107;

const int _SC_WORD_BIT1 = 107;

const int _SC_XBS5_ILP32_OFF32 = 125;

const int _SC_XBS5_ILP32_OFF321 = 125;

const int _SC_XBS5_ILP32_OFFBIG = 126;

const int _SC_XBS5_ILP32_OFFBIG1 = 126;

const int _SC_XBS5_LP64_OFF64 = 127;

const int _SC_XBS5_LP64_OFF641 = 127;

const int _SC_XBS5_LPBIG_OFFBIG = 128;

const int _SC_XBS5_LPBIG_OFFBIG1 = 128;

const int _SC_XOPEN_CRYPT = 92;

const int _SC_XOPEN_CRYPT1 = 92;

const int _SC_XOPEN_ENH_I18N = 93;

const int _SC_XOPEN_ENH_I18N1 = 93;

const int _SC_XOPEN_LEGACY = 129;

const int _SC_XOPEN_LEGACY1 = 129;

const int _SC_XOPEN_REALTIME = 130;

const int _SC_XOPEN_REALTIME1 = 130;

const int _SC_XOPEN_REALTIME_THREADS = 131;

const int _SC_XOPEN_REALTIME_THREADS1 = 131;

const int _SC_XOPEN_SHM = 94;

const int _SC_XOPEN_SHM1 = 94;

const int _SC_XOPEN_STREAMS = 246;

const int _SC_XOPEN_STREAMS1 = 246;

const int _SC_XOPEN_UNIX = 91;

const int _SC_XOPEN_UNIX1 = 91;

const int _SC_XOPEN_VERSION = 89;

const int _SC_XOPEN_VERSION1 = 89;

const int _SC_XOPEN_XCU_VERSION = 90;

const int _SC_XOPEN_XCU_VERSION1 = 90;

const int _SC_XOPEN_XPG2 = 98;

const int _SC_XOPEN_XPG21 = 98;

const int _SC_XOPEN_XPG3 = 99;

const int _SC_XOPEN_XPG31 = 99;

const int _SC_XOPEN_XPG4 = 100;

const int _SC_XOPEN_XPG41 = 100;

const int _SIGSET_NWORDS = 16;

const int _SS_PADSIZE = 118;

const int _SS_SIZE = 128;

const int _STAT_VER = 1;

const int _STAT_VER_KERNEL = 0;

const int _STAT_VER_LINUX = 1;

const int _STDC_PREDEF_H = 1;

const int _STDINT_H = 1;

const int _STDIO_H = 1;

const int _STDLIB_H = 1;

const int _STRINGS_H = 1;

const int _STRING_H = 1;

const int _STRUCT_TIMESPEC = 1;

const int _SYS_CDEFS_H = 1;

const int _SYS_RESOURCE_H = 1;

const int _SYS_SELECT_H = 1;

const int _SYS_SOCKET_H = 1;

const int _SYS_STAT_H = 1;

const int _SYS_SYSINFO_H = 1;

const int _SYS_TIME_H = 1;

const int _SYS_TYPES_H = 1;

const int _SYS_UCONTEXT_H = 1;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _TIME_H = 1;

const int _UNISTD_H = 1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = -1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = 1;

const int _XOPEN_REALTIME = 1;

const int _XOPEN_REALTIME_THREADS = 1;

const int _XOPEN_SHM = 1;

const int _XOPEN_UNIX = 1;

const int _XOPEN_VERSION = 700;

const int _XOPEN_XCU_VERSION = 4;

const int _XOPEN_XPG2 = 1;

const int _XOPEN_XPG3 = 1;

const int _XOPEN_XPG4 = 1;

const int __BIG_ENDIAN = 4321;

const int __BITS_PER_LONG = 64;

const int __BIT_TYPES_DEFINED__ = 1;

const int __BYTE_ORDER = 1234;

const int __CPU_SETSIZE = 1024;

const int __ENUM_IDTYPE_T = 1;

const int __FD_SETSIZE = 1024;

const String __FD_ZERO_STOS = 'stosq';

const int __FILE_defined = 1;

const int __FLOAT_WORD_ORDER = 1234;

const int __FP_LOGB0_IS_MIN = 1;

const int __FP_LOGBNAN_IS_MIN = 1;

const int __GLIBC_FLT_EVAL_METHOD = 0;

const int __GLIBC_MINOR__ = 31;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC__ = 2;

const int __GNU_LIBRARY__ = 6;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const String __ILP32_OFF32_CFLAGS = '-m32';

const String __ILP32_OFF32_LDFLAGS = '-m32';

const String __ILP32_OFFBIG_CFLAGS = '-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64';

const String __ILP32_OFFBIG_LDFLAGS = '-m32';

const int __INO_T_MATCHES_INO64_T = 1;

const int __LC_ADDRESS = 9;

const int __LC_ALL = 6;

const int __LC_COLLATE = 3;

const int __LC_CTYPE = 0;

const int __LC_IDENTIFICATION = 12;

const int __LC_MEASUREMENT = 11;

const int __LC_MESSAGES = 5;

const int __LC_MONETARY = 4;

const int __LC_NAME = 8;

const int __LC_NUMERIC = 1;

const int __LC_PAPER = 7;

const int __LC_TELEPHONE = 10;

const int __LC_TIME = 2;

const int __LITTLE_ENDIAN = 1234;

const int __LONG_DOUBLE_USES_FLOAT128 = 0;

const String __LP64_OFF64_CFLAGS = '-m64';

const String __LP64_OFF64_LDFLAGS = '-m64';

const int __MATH_DECLARE_LDOUBLE = 1;

const int __NCPUBITS = 64;

const int __NFDBITS = 64;

const int __NGREG = 23;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __PDP_ENDIAN = 3412;

const int __POSIX2_THIS_VERSION = 200809;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __SIGEV_MAX_SIZE = 64;

const int __SIGEV_PAD_SIZE = 12;

const int __SIGRTMAX = 64;

const int __SIGRTMIN = 32;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SI_ASYNCIO_AFTER_SIGIO = 1;

const int __SI_ERRNO_THEN_CODE = 1;

const int __SI_HAVE_SIGSYS = 1;

const int __SI_MAX_SIZE = 128;

const int __SI_PAD_SIZE = 28;

const int __SOCKADDR_COMMON_SIZE = 2;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_ISO_10646__ = 201706;

const int __SYSCALL_WORDSIZE = 64;

const int __S_IEXEC = 64;

const int __S_IFBLK = 24576;

const int __S_IFCHR = 8192;

const int __S_IFDIR = 16384;

const int __S_IFIFO = 4096;

const int __S_IFLNK = 40960;

const int __S_IFMT = 61440;

const int __S_IFREG = 32768;

const int __S_IFSOCK = 49152;

const int __S_IREAD = 256;

const int __S_ISGID = 1024;

const int __S_ISUID = 2048;

const int __S_ISVTX = 512;

const int __S_IWRITE = 128;

const int __TIMESIZE = 64;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __USE_ISOC11 = 1;

const int __USE_ISOC95 = 1;

const int __USE_ISOC99 = 1;

const int __USE_KERNEL_IPV6_DEFS = 0;

const int __USE_MISC = 1;

const int __USE_POSIX = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_POSIX2 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int __WALL = 1073741824;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int __WCLONE = 2147483648;

const int __WCOREFLAG = 128;

const int __WNOTHREAD = 536870912;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __W_CONTINUED = 65535;

const int ____FILE_defined = 1;

const int _____fpos64_t_defined = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

typedef __blkcnt_t = ffi.Int64;
typedef __blksize_t = ffi.Int64;
typedef __clock_t = ffi.Int64;

const int __clock_t_defined = 1;

const int __clockid_t_defined = 1;

typedef __cpu_mask = ffi.Uint64;
typedef __dev_t = ffi.Uint64;
typedef __fd_mask = ffi.Int64;

class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> __val;
}

typedef __gid_t = ffi.Uint32;

const int __glibc_c99_flexarr_available = 1;

const int __have_pthread_attr_t = 1;

typedef __ino_t = ffi.Uint64;

const int __iovec_defined = 1;

abstract class __itimer_which {
  static const int ITIMER_REAL = 0;
  static const int ITIMER_VIRTUAL = 1;
  static const int ITIMER_PROF = 2;
}

const int __itimerspec_defined = 1;

class __jmp_buf_tag extends ffi.Opaque {}

class __kernel_fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> fds_bits;
}

class __kernel_fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int32> val;
}

typedef __kernel_long_t = ffi.Int64;
typedef __kernel_ulong_t = ffi.Uint64;

const int __ldiv_t_defined = 1;

const int __lldiv_t_defined = 1;

class __locale_data extends ffi.Opaque {}

class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.Uint16> __ctype_b;

  external ffi.Pointer<ffi.Int32> __ctype_tolower;

  external ffi.Pointer<ffi.Int32> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Int8>> __names;
}

class __mbstate_t extends ffi.Struct {
  @ffi.Int32()
  external int __count;

  external UnnamedUnion1 __value;
}

typedef __mode_t = ffi.Uint32;
typedef __nlink_t = ffi.Uint64;
typedef __off64_t = ffi.Int64;
typedef __off_t = ffi.Int64;

const int __osockaddr_defined = 1;

typedef __pid_t = ffi.Int32;

abstract class __priority_which {
  static const int PRIO_PROCESS = 0;
  static const int PRIO_PGRP = 1;
  static const int PRIO_USER = 2;
}

class __pthread_cleanup_frame extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>> __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int32()
  external int __do_it;

  @ffi.Int32()
  external int __cancel_type;
}

class __pthread_cond_s extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_size;

  @ffi.Uint32()
  external int __g1_orig_size;

  @ffi.Uint32()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint32> __g_signals;
}

class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

typedef __pthread_list_t = __pthread_internal_list;

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.Uint32()
  external int __readers;

  @ffi.Uint32()
  external int __writers;

  @ffi.Uint32()
  external int __wrphase_futex;

  @ffi.Uint32()
  external int __writers_futex;

  @ffi.Uint32()
  external int __pad3;

  @ffi.Uint32()
  external int __pad4;

  @ffi.Int32()
  external int __cur_writer;

  @ffi.Int32()
  external int __shared;

  @ffi.Int8()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Uint8> __pad1;

  @ffi.Uint64()
  external int __pad2;

  @ffi.Uint32()
  external int __flags;
}

class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<UnnamedStruct3> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

typedef __rlim_t = ffi.Uint64;

abstract class __rlimit_resource {
  static const int RLIMIT_CPU = 0;
  static const int RLIMIT_FSIZE = 1;
  static const int RLIMIT_DATA = 2;
  static const int RLIMIT_STACK = 3;
  static const int RLIMIT_CORE = 4;
  static const int __RLIMIT_RSS = 5;
  static const int RLIMIT_NOFILE = 7;
  static const int __RLIMIT_OFILE = 7;
  static const int RLIMIT_AS = 9;
  static const int __RLIMIT_NPROC = 6;
  static const int __RLIMIT_MEMLOCK = 8;
  static const int __RLIMIT_LOCKS = 10;
  static const int __RLIMIT_SIGPENDING = 11;
  static const int __RLIMIT_MSGQUEUE = 12;
  static const int __RLIMIT_NICE = 13;
  static const int __RLIMIT_RTPRIO = 14;
  static const int __RLIMIT_RTTIME = 15;
  static const int __RLIMIT_NLIMITS = 16;
  static const int __RLIM_NLIMITS = 16;
}

const int __rusage_defined = 1;

abstract class __rusage_who {
  static const int RUSAGE_SELF = 0;
  static const int RUSAGE_CHILDREN = -1;
}

const int __sig_atomic_t_defined = 1;

const int __sigevent_t_defined = 1;

typedef __sighandler_t = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>;

const int __siginfo_t_defined = 1;

class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint64> __val;
}

const int __sigset_t_defined = 1;

const int __sigstack_defined = 1;

typedef __sigval_t = sigval;

abstract class __socket_type {
  static const int SOCK_STREAM = 1;
  static const int SOCK_DGRAM = 2;
  static const int SOCK_RAW = 3;
  static const int SOCK_RDM = 4;
  static const int SOCK_SEQPACKET = 5;
  static const int SOCK_DCCP = 6;
  static const int SOCK_PACKET = 10;
  static const int SOCK_CLOEXEC = 524288;
  static const int SOCK_NONBLOCK = 2048;
}

typedef __socklen_t = ffi.Uint32;

const int __stack_t_defined = 1;

const int __struct_FILE_defined = 1;

const int __struct_tm_defined = 1;

typedef __suseconds_t = ffi.Int64;
typedef __syscall_slong_t = ffi.Int64;
typedef __time_t = ffi.Int64;

const int __time_t_defined = 1;

const int __timer_t_defined = 1;

const int __timeval_defined = 1;

typedef __u16 = ffi.Uint16;
typedef __u32 = ffi.Uint32;
typedef __uid_t = ffi.Uint32;
typedef __uint16_t = ffi.Uint16;
typedef __uint32_t = ffi.Uint32;
typedef __uint64_t = ffi.Uint64;

class _fpreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> significand;

  @ffi.Uint16()
  external int exponent;
}

class _fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

class _fpx_sw_bytes extends ffi.Struct {
  @__uint32_t()
  external int magic1;

  @__uint32_t()
  external int extended_size;

  @__uint64_t()
  external int xstate_bv;

  @__uint32_t()
  external int xstate_size;

  @ffi.Array.multi([7])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

class _fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> significand;

  @ffi.Uint16()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __glibc_reserved1;
}

class _libc_fpstate extends ffi.Struct {
  @__uint16_t()
  external int cwd;

  @__uint16_t()
  external int swd;

  @__uint16_t()
  external int ftw;

  @__uint16_t()
  external int fop;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int rdp;

  @__uint32_t()
  external int mxcsr;

  @__uint32_t()
  external int mxcr_mask;

  @ffi.Array.multi([8])
  external ffi.Array<_libc_fpxreg> _st;

  @ffi.Array.multi([16])
  external ffi.Array<_libc_xmmreg> _xmm;

  @ffi.Array.multi([24])
  external ffi.Array<__uint32_t> __glibc_reserved1;
}

class _libc_fpxreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint16> significand;

  @ffi.Uint16()
  external int exponent;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __glibc_reserved1;
}

class _libc_xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int32()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

class _xmmreg extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<__uint32_t> element;
}

class _xsave_hdr extends ffi.Struct {
  @__uint64_t()
  external int xstate_bv;

  @ffi.Array.multi([2])
  external ffi.Array<__uint64_t> __glibc_reserved1;

  @ffi.Array.multi([5])
  external ffi.Array<__uint64_t> __glibc_reserved2;
}

class _xstate extends ffi.Struct {
  external _fpstate fpstate;

  external _xsave_hdr xstate_hdr;

  external _ymmh_state ymmh;
}

class _ymmh_state extends ffi.Struct {
  @ffi.Array.multi([64])
  external ffi.Array<__uint32_t> ymmh_space;
}

class addrinfo extends ffi.Struct {
  @ffi.Int32()
  external int ai_flags;

  @ffi.Int32()
  external int ai_family;

  @ffi.Int32()
  external int ai_socktype;

  @ffi.Int32()
  external int ai_protocol;

  @socklen_t()
  external int ai_addrlen;

  external ffi.Pointer<sockaddr> ai_addr;

  external ffi.Pointer<ffi.Int8> ai_canonname;

  external ffi.Pointer<addrinfo> ai_next;
}

class cmsghdr extends ffi.Opaque {}

class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class drand48_data extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __x;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint16> __old_x;

  @ffi.Uint16()
  external int __c;

  @ffi.Uint16()
  external int __init;

  @ffi.Uint64()
  external int __a;
}

class fd_set extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__fd_mask> __fds_bits;
}

typedef fpregset_t = ffi.Pointer<_libc_fpstate>;
typedef greg_t = ffi.Int64;

class group_filter extends ffi.Struct {
  @ffi.Uint32()
  external int gf_interface;

  external sockaddr_storage gf_group;

  @ffi.Uint32()
  external int gf_fmode;

  @ffi.Uint32()
  external int gf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<sockaddr_storage> gf_slist;
}

class group_req extends ffi.Struct {
  @ffi.Uint32()
  external int gr_interface;

  external sockaddr_storage gr_group;
}

class group_source_req extends ffi.Struct {
  @ffi.Uint32()
  external int gsr_interface;

  external sockaddr_storage gsr_group;

  external sockaddr_storage gsr_source;
}

class hostent extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> h_name;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> h_aliases;

  @ffi.Int32()
  external int h_addrtype;

  @ffi.Int32()
  external int h_length;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> h_addr_list;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class in6_addr extends ffi.Struct {
  external UnnamedUnion6 __in6_u;
}

class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;

class in_pktinfo extends ffi.Struct {
  @ffi.Int32()
  external int ipi_ifindex;

  external in_addr ipi_spec_dst;

  external in_addr ipi_addr;
}

typedef in_port_t = ffi.Uint16;

class iovec extends ffi.Struct {
  external ffi.Pointer<ffi.Void> iov_base;

  @ffi.Int32()
  external int iov_len;
}

class ip_mreq extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;
}

class ip_mreq_source extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_interface;

  external in_addr imr_sourceaddr;
}

class ip_mreqn extends ffi.Struct {
  external in_addr imr_multiaddr;

  external in_addr imr_address;

  @ffi.Int32()
  external int imr_ifindex;
}

class ip_msfilter extends ffi.Struct {
  external in_addr imsf_multiaddr;

  external in_addr imsf_interface;

  @ffi.Uint32()
  external int imsf_fmode;

  @ffi.Uint32()
  external int imsf_numsrc;

  @ffi.Array.multi([1])
  external ffi.Array<in_addr> imsf_slist;
}

class ip_opts extends ffi.Struct {
  external in_addr ip_dst;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> ip_opts1;
}

class ipv6_mreq extends ffi.Struct {
  external in6_addr ipv6mr_multiaddr;

  @ffi.Uint32()
  external int ipv6mr_interface;
}

class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

class itimerval extends ffi.Struct {
  external timeval it_interval;

  external timeval it_value;
}

class lconv extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> decimal_point;

  external ffi.Pointer<ffi.Int8> thousands_sep;

  external ffi.Pointer<ffi.Int8> grouping;

  external ffi.Pointer<ffi.Int8> int_curr_symbol;

  external ffi.Pointer<ffi.Int8> currency_symbol;

  external ffi.Pointer<ffi.Int8> mon_decimal_point;

  external ffi.Pointer<ffi.Int8> mon_thousands_sep;

  external ffi.Pointer<ffi.Int8> mon_grouping;

  external ffi.Pointer<ffi.Int8> positive_sign;

  external ffi.Pointer<ffi.Int8> negative_sign;

  @ffi.Int8()
  external int int_frac_digits;

  @ffi.Int8()
  external int frac_digits;

  @ffi.Int8()
  external int p_cs_precedes;

  @ffi.Int8()
  external int p_sep_by_space;

  @ffi.Int8()
  external int n_cs_precedes;

  @ffi.Int8()
  external int n_sep_by_space;

  @ffi.Int8()
  external int p_sign_posn;

  @ffi.Int8()
  external int n_sign_posn;

  @ffi.Int8()
  external int int_p_cs_precedes;

  @ffi.Int8()
  external int int_p_sep_by_space;

  @ffi.Int8()
  external int int_n_cs_precedes;

  @ffi.Int8()
  external int int_n_sep_by_space;

  @ffi.Int8()
  external int int_p_sign_posn;

  @ffi.Int8()
  external int int_n_sign_posn;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class linger extends ffi.Struct {
  @ffi.Int32()
  external int l_onoff;

  @ffi.Int32()
  external int l_linger;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

const int math_errhandling = 3;

class mcontext_t extends ffi.Struct {
  @ffi.Array.multi([23])
  external ffi.Array<greg_t> gregs;

  external fpregset_t fpregs;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint64> __reserved1;
}

class msghdr extends ffi.Struct {
  external ffi.Pointer<ffi.Void> msg_name;

  @socklen_t()
  external int msg_namelen;

  external ffi.Pointer<iovec> msg_iov;

  @ffi.Int32()
  external int msg_iovlen;

  external ffi.Pointer<ffi.Void> msg_control;

  @ffi.Int32()
  external int msg_controllen;

  @ffi.Int32()
  external int msg_flags;
}

class netent extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> n_name;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> n_aliases;

  @ffi.Int32()
  external int n_addrtype;

  @ffi.Uint32()
  external int n_net;
}

class osockaddr extends ffi.Struct {
  @ffi.Uint16()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Uint8> sa_data;
}

class protoent extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> p_name;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> p_aliases;

  @ffi.Int32()
  external int p_proto;
}

class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int32()
  external int __align;
}

class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Int8> __size;

  @ffi.Int64()
  external int __align;
}

typedef pthread_spinlock_t = ffi.Int32;
typedef pthread_t = ffi.Uint64;

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

typedef rlim_t = __rlim_t;

class rlimit extends ffi.Struct {
  @rlim_t()
  external int rlim_cur;

  @rlim_t()
  external int rlim_max;
}

class rpcent extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> r_name;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> r_aliases;

  @ffi.Int32()
  external int r_number;
}

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;
}

typedef sa_family_t = ffi.Uint16;

class sched_param extends ffi.Struct {
  @ffi.Int32()
  external int sched_priority;
}

class servent extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> s_name;

  external ffi.Pointer<ffi.Pointer<ffi.Int8>> s_aliases;

  @ffi.Int32()
  external int s_port;

  external ffi.Pointer<ffi.Int8> s_proto;
}

class sigaction extends ffi.Struct {
  external UnnamedUnion5 __sigaction_handler;

  external __sigset_t sa_mask;

  @ffi.Int32()
  external int sa_flags;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> sa_restorer;
}

class sigcontext extends ffi.Struct {
  @__uint64_t()
  external int r8;

  @__uint64_t()
  external int r9;

  @__uint64_t()
  external int r10;

  @__uint64_t()
  external int r11;

  @__uint64_t()
  external int r12;

  @__uint64_t()
  external int r13;

  @__uint64_t()
  external int r14;

  @__uint64_t()
  external int r15;

  @__uint64_t()
  external int rdi;

  @__uint64_t()
  external int rsi;

  @__uint64_t()
  external int rbp;

  @__uint64_t()
  external int rbx;

  @__uint64_t()
  external int rdx;

  @__uint64_t()
  external int rax;

  @__uint64_t()
  external int rcx;

  @__uint64_t()
  external int rsp;

  @__uint64_t()
  external int rip;

  @__uint64_t()
  external int eflags;

  @ffi.Uint16()
  external int cs;

  @ffi.Uint16()
  external int gs;

  @ffi.Uint16()
  external int fs;

  @ffi.Uint16()
  external int __pad0;

  @__uint64_t()
  external int err;

  @__uint64_t()
  external int trapno;

  @__uint64_t()
  external int oldmask;

  @__uint64_t()
  external int cr2;

  @ffi.Array.multi([8])
  external ffi.Array<__uint64_t> __reserved1;
}

class sigevent extends ffi.Struct {
  external __sigval_t sigev_value;

  @ffi.Int32()
  external int sigev_signo;

  @ffi.Int32()
  external int sigev_notify;

  external UnnamedUnion2 _sigev_un;
}

class siginfo_t extends ffi.Struct {
  @ffi.Int32()
  external int si_signo;

  @ffi.Int32()
  external int si_errno;

  @ffi.Int32()
  external int si_code;

  @ffi.Int32()
  external int __pad0;

  external UnnamedUnion3 _sifields;
}

typedef sigset_t = __sigset_t;

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

class sigval extends ffi.Union {
  @ffi.Int32()
  external int sival_int;

  external ffi.Pointer<ffi.Void> sival_ptr;
}

class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Int8> sa_data;
}

class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> sin_zero;
}

class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

@ffi.Packed(1)
class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Int8> __ss_padding;

  @ffi.Uint64()
  external int __ss_align;
}

typedef socklen_t = __socklen_t;
typedef stack_t = UnnamedStruct14;

class stat extends ffi.Struct {
  @__dev_t()
  external int st_dev;

  @__ino_t()
  external int st_ino;

  @__nlink_t()
  external int st_nlink;

  @__mode_t()
  external int st_mode;

  @__uid_t()
  external int st_uid;

  @__gid_t()
  external int st_gid;

  @ffi.Int32()
  external int __pad0;

  @__dev_t()
  external int st_rdev;

  @__off_t()
  external int st_size;

  @__blksize_t()
  external int st_blksize;

  @__blkcnt_t()
  external int st_blocks;

  external timespec st_atim;

  external timespec st_mtim;

  external timespec st_ctim;

  @ffi.Array.multi([3])
  external ffi.Array<__syscall_slong_t> __glibc_reserved;
}

class sysinfo extends ffi.Struct {
  @__kernel_long_t()
  external int uptime;

  @ffi.Array.multi([3])
  external ffi.Array<__kernel_ulong_t> loads;

  @__kernel_ulong_t()
  external int totalram;

  @__kernel_ulong_t()
  external int freeram;

  @__kernel_ulong_t()
  external int sharedram;

  @__kernel_ulong_t()
  external int bufferram;

  @__kernel_ulong_t()
  external int totalswap;

  @__kernel_ulong_t()
  external int freeswap;

  @__u16()
  external int procs;

  @__u16()
  external int pad;

  @__kernel_ulong_t()
  external int totalhigh;

  @__kernel_ulong_t()
  external int freehigh;

  @__u32()
  external int mem_unit;

  @ffi.Array.multi([0])
  external ffi.Array<ffi.Int8> _f;
}

abstract class tcp_ca_state {
  static const int TCP_CA_Open = 0;
  static const int TCP_CA_Disorder = 1;
  static const int TCP_CA_CWR = 2;
  static const int TCP_CA_Recovery = 3;
  static const int TCP_CA_Loss = 4;
}

class tcp_cookie_transactions extends ffi.Struct {
  @ffi.Uint16()
  external int tcpct_flags;

  @ffi.Uint8()
  external int __tcpct_pad1;

  @ffi.Uint8()
  external int tcpct_cookie_desired;

  @ffi.Uint16()
  external int tcpct_s_data_desired;

  @ffi.Uint16()
  external int tcpct_used;

  @ffi.Array.multi([536])
  external ffi.Array<ffi.Uint8> tcpct_value;
}

class tcp_info extends ffi.Opaque {}

class tcp_md5sig extends ffi.Struct {
  external sockaddr_storage tcpm_addr;

  @ffi.Uint8()
  external int tcpm_flags;

  @ffi.Uint8()
  external int tcpm_prefixlen;

  @ffi.Uint16()
  external int tcpm_keylen;

  @ffi.Uint32()
  external int __tcpm_pad;

  @ffi.Array.multi([80])
  external ffi.Array<ffi.Uint8> tcpm_key;
}

class tcp_repair_opt extends ffi.Struct {
  @ffi.Uint32()
  external int opt_code;

  @ffi.Uint32()
  external int opt_val;
}

class tcp_repair_window extends ffi.Struct {
  @ffi.Uint32()
  external int snd_wl1;

  @ffi.Uint32()
  external int snd_wnd;

  @ffi.Uint32()
  external int max_window;

  @ffi.Uint32()
  external int rcv_wnd;

  @ffi.Uint32()
  external int rcv_wup;
}

class tcp_zerocopy_receive extends ffi.Struct {
  @ffi.Uint64()
  external int address;

  @ffi.Uint32()
  external int length;

  @ffi.Uint32()
  external int recv_skip_hint;
}

class tcphdr extends ffi.Opaque {}

class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

class timeval extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__suseconds_t()
  external int tv_usec;
}

class timezone1 extends ffi.Struct {
  @ffi.Int32()
  external int tz_minuteswest;

  @ffi.Int32()
  external int tz_dsttime;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

class ucontext_t extends ffi.Struct {
  @ffi.Uint64()
  external int uc_flags;

  external ffi.Pointer<ucontext_t> uc_link;

  external stack_t uc_stack;

  external mcontext_t uc_mcontext;

  external sigset_t uc_sigmask;

  external _libc_fpstate __fpregs_mem;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint64> __ssp;
}
