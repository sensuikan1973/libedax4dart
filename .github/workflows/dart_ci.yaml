name: Dart CI

on:
  pull_request:
    paths:
      - '**.dart'
      - 'pubspec.*'
      - '**/analysis_options.yaml'
      - '.github/workflows/dart_ci.yaml'
      - 'scripts/build_libedax.sh'
      - '.libedax-version'
      - '.codecov.yml'
  push:
    branches: [ main ]
    paths:
      - '**.dart'
      - 'pubspec.*'
      - '**/analysis_options.yaml'
      - '.github/workflows/dart_ci.yaml'
      - 'scripts/build_libedax.sh'
      - '.libedax-version'
      - '.codecov.yml'

jobs:
  format:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v3
    - uses: dart-lang/setup-dart@v1
    - run: dart format . --set-exit-if-changed

  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v3
    - uses: dart-lang/setup-dart@v1
    - name: install dependencies
      run: dart pub get
    - run: dart analyze --fatal-infos --fatal-warnings .

  test:
    needs: [format, analyze]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 5
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        include:
          - os: ubuntu-20.04
            libedax_build_command: make libbuild ARCH=x64 COMP=gcc OS=linux
            libedax_bin: libedax.so
          - os: windows-2019
            libedax_build_command: make libbuild ARCH=x64 COMP=gcc OS=windows
            libedax_bin: libedax-x64.dll
          - os: macos-11
            libedax_build_command: make libbuild ARCH=x64-modern COMP=gcc OS=osx
            libedax_bin: libedax.dylib
    steps:
    - uses: actions/checkout@v3
    - uses: dart-lang/setup-dart@v1

    - name: build libedax
      shell: bash
      env:
        dst: '.'
        libedax_build_command: ${{ matrix.libedax_build_command }}
      run: ./scripts/build_libedax.sh

    - name: output build info
      shell: bash
      run: .github/scripts/output_build_info.sh . gcc && cat env.txt

    # # DEBUG
    # - name: setup tmate session for debug
    #   uses: mxschmitt/action-tmate@v3

    - name: install dependencies
      run: dart pub get
    - name: test
      run: dart run test . --coverage=coverage
    - name: coverage
      run: dart run coverage:format_coverage --lcov --packages=.packages --in coverage --out lcov.info
    - uses: codecov/codecov-action@v2.1.0
      with:
        file: lcov.info

    - name: run pana to chceck package score before publish
      if: runner.os == 'Linux'
      id: run_pana_step
      run: |
        pub_point_by_pana=$(dart run pana | tail -1)
        echo "::set-output name=pub_point_by_pana::$pub_point_by_pana"

    - uses: Sibz/github-status-action@v1
      if: runner.os == 'Linux'
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        context: Pub Poits by Pana
        description: ${{ steps.run_pana_step.outputs.pub_point_by_pana }}
        state: success
        sha: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: run example
      run: |-
        cd example && dart pub get && cd ..
        dart example/example.dart
